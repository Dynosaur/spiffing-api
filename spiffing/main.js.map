{"version":3,"sources":["./src/app/ui/components/view-card/index.ts","./src/app/ui/views/settings/change-screenname.ts","./src/app/ui/views/post/post.component.ts","./src/app/ui/views/post/post.component.html","./src/app/api/services/api-http.service.ts","./src/app/api/interface/responses/index.ts","./src/app/ui/components/dialog/dialog.component.ts","./src/app/ui/components/dialog/dialog.component.html","./src/app/ui/components/button/index.ts","./src/app/pipes/date-ago.pipe.ts","./src/app/ui/components/dialogs/create-account-dialog/index.ts","./src/app/forms/validator-error-string.ts","./src/app/ui/views/profile/profile.component.html","./src/app/ui/views/profile/profile.component.ts","./src/app/ui/views/landing-page/index.ts","./src/app/api/interface/responses/auth-responses.ts","./src/environments/environment.ts","./src/app/services/dialog.service.ts","./src/app/services/local-storage.service.ts","./src/app/util/basic-auth.ts","./src/app/services/post.service.ts","./src/app/components/not-found/not-found.component.ts","./src/app/components/not-found/not-found.component.html","./src/app/services/user-account.service.ts","./src/app/ui/components/dialogs/login-dialog/index.ts","./src/app/ui/components/dialogs/delete-account-confirm-dialog/delete-account-confirm-dialog.component.ts","./src/app/ui/components/dialogs/delete-account-confirm-dialog/delete-account-confirm-dialog.component.html","./src/app/components/form-field/form-field.component.ts","./src/app/components/form-field/form-field.component.html","./src/app/ui/components/dialogs/change-username-dialog/index.ts","./src/app/ui/components/dialogs/create-account-dialog/create-account-dialog.component.ts","./src/app/ui/components/dialogs/create-account-dialog/create-account-dialog.component.html","./src/app/ui/components/dialogs/change-username-dialog/change-username-dialog.component.ts","./src/app/ui/components/dialogs/change-username-dialog/change-username-dialog.component.html","./src/app/pipes/comma-number.pipe.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/api/interface/response.ts","./src/app/forms/validators.ts","./src/app/pipes/pretty-number.pipe.ts","./src/app/api/services/api.service.ts","./src/app/app.module.ts","./src/app/ui/components/text-field-dialog/text-field-dialog.component.ts","./src/app/ui/components/text-field-dialog/text-field-dialog.component.html","./src/app/ui/views/settings/index.ts","./src/app/components/standalone-card/standalone-card.component.html","./src/app/components/standalone-card/standalone-card.component.ts","./src/app/api/interface/responses/error-responses.ts","./src/app/ui/views/index.ts","./src/app/api/interface/data-types.ts","./src/app/ui/components/view-card/view-card.component.ts","./src/app/ui/components/view-card/view-card.component.html","./src/app/ui/components/dialogs/login-dialog/login-dialog.component.ts","./src/app/ui/components/dialogs/login-dialog/login-dialog.component.html","./src/app/ui/views/settings/settings.component.ts","./src/app/ui/views/settings/settings.component.html","./src/app/ui/views/profile/index.ts","./src/app/services/snackbar.service.ts","./src/app/ui/components/button/button.component.ts","./src/app/ui/components/button/button.component.html","./src/app/ui/components/rate-counter/rate-counter.component.ts","./src/app/ui/components/rate-counter/rate-counter.component.html","./src/app/api/interface/index.ts","./src/app/app-routing.module.ts","./src/app/material.module.ts","./src/app/ui/components/dialog/index.ts","./src/app/ui/views/landing-page/landing-page.component.ts","./src/app/ui/views/landing-page/landing-page.component.html","./src/app/ui/components/dialogs/index.ts","./src/app/api/interface/responses/api-responses.ts","./src/app/ui/components/index.ts","./src/app/ui/components/dialogs/delete-account-confirm-dialog/index.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAA0D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAb;AAEe;AAG7C,SAAS,gBAAgB,CAAC,aAA4B,EAAE,cAAkC;IACrG,MAAM,iBAAiB,GAAG,IAAI,0DAAW,CACrC,cAAc,CAAC,IAAI,CAAC,UAAU,EAC9B,iFAAc,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CACjD,CAAC;IACF,aAAa,CAAC,iBAAiB,CAAC;QAC5B,KAAK,EAAE,oBAAoB;QAC3B,UAAU,EAAE,QAAQ;QACpB,WAAW,EAAE,8DAA8D;QAC3E,MAAM,EAAE;YACJ;gBACI,OAAO,EAAE,OAAO;gBAChB,IAAI,EAAE,YAAY;gBAClB,KAAK,EAAE,aAAa;gBACpB,WAAW,EAAE,iBAAiB;aACjC;SACJ;QACD,QAAQ,EAAE,CAAM,MAAM,EAAC,EAAE,CAAC;YACtB,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;YACtB,MAAM,aAAa,GAAG,MAAM,cAAc,CAAC,KAAK,CAAC,EAAE,UAAU,EAAE,iBAAiB,CAAC,KAAK,EAAE,CAAC,CAAC;YAC1F,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC;YACvB,IAAI,aAAa,CAAC,EAAE,KAAK,IAAI,EAAE;gBAC3B,cAAc,CAAC,eAAe,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;gBACxD,MAAM,CAAC,WAAW,EAAE,CAAC;aACxB;QACL,CAAC;KACJ,CAAC,CAAC;AACP,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/BkD;AAIc;AACC;;;;;;;;;;;;;;;ICJ1D,yEAAoE;IAChE,yEAA2B;IAC/B,4DAAM;;;;IAEF,yEAAoE;IAChE,0EAAkB;IACd,yFAC0D;IADF,0UAAmB;IAE3E,4DAAqB;IACrB,0EAA2B;IACvB,wEAAiB;IAAA,uDAAgB;IAAA,4DAAI;IACrC,wEAA2B;IAAA,qEACvB;IAAA,2EAAqC;IAAC,uDAAiC;;IAAA,4DAAO;IAC9E,4EAA8E;IAC1E,wDAA0B;IAAA,4DAAO;IACzC,4DAAI;IACJ,2EAA0B;IAAA,wDAAkB;IAAA,4DAAM;IACtD,4DAAM;IACV,4DAAM;IACN,qEAAG;IAAA,wDAAoE;IAAA,4DAAI;IAC3E,2EACiD;IACjD,oFAC+B;IADjB,8UAAwB;IACP,gEAAI;IAAA,4DAAe;IACtD,4DAAM;;;IAlBsB,0DAAa;IAAb,6EAAa;IAIZ,0DAAgB;IAAhB,kFAAgB;IAEvB,0DAA8B;IAA9B,qGAA8B;IAAE,0DAAiC;IAAjC,sKAAiC;IAC5C,0DAAkD;IAAlD,yHAAkD;IACzE,0DAA0B;IAA1B,sGAA0B;IAER,0DAAkB;IAAlB,oFAAkB;IAGjD,0DAAoE;IAApE,8IAAoE;IACtC,0DAA8B;IAA9B,8FAA8B;IAEI,0DAAkC;IAAlC,kGAAkC;;;IAIrG,0EAAuB;IACnB,qEAAI;IAAA,6GAAkD;IAAA,4DAAK;IAC3D,qEAAsD;IACtD,wEAAyB;IAAA,uDAAyB;IAAA,4DAAI;IAC1D,4DAAM;;;IADuB,0DAAyB;IAAzB,oGAAyB;;;IAzB1D,yHAoBM;IACN,mNAMc;;;;IA3BsB,6EAAY;;;IA8BxD,wEAAiE;IAC7D,6EAA2C;IAC/C,qEAAe;;IADE,0DAAe;IAAf,wEAAe;;;IAchB,oEAA6B;IAAA,+DAAI;IAAA,4DAAI;;;;IAXjD,0EAAwE;IACpE,yFAEgD;IAFX,6XAA6B;IAElB,4DAAqB;IACrE,sEAAK;IACD,0EAA4B;IACxB,wEAA8E;IAAA,uDAA6B;IAAA,4DAAI;IAC/G,wEAAwC;IAAA,uDAAmC;;IAAA,4DAAI;IACnF,4DAAM;IACN,wEAA2B;IAAA,wDAAqB;IAAA,4DAAI;IACpD,2EAA4B;IACxB,4HAAqC;IACrC,qEAAG;IAAA,iEAAK;IAAA,4DAAI;IAChB,4DAAM;IACV,4DAAM;IACV,4DAAM;;;;IAdkB,0DAAgB;IAAhB,6EAAgB;IAKA,0DAAiD;IAAjD,8GAAiD;IAAC,0DAA6B;IAA7B,4FAA6B;IACxG,0DAAoC;IAApC,yGAAoC;IAAC,0DAAmC;IAAnC,kKAAmC;IAEpD,0DAAqB;IAArB,oFAAqB;IAExC,0DAAuB;IAAvB,+FAAuB;;;IAXvC,0HAeM;;;IAfqD,oFAAW;;ADjBvE,MAAM,aAAa;IA0BtB,YAAY,KAAY,EAAE,KAAqB,EAAE,IAAiB,EAAE,OAA2B,EAC/F,QAAyB,EAAE,GAAe;QAjBjC,UAAK,GAAG;YACb,KAAK,EAAE,KAAK;YACZ,QAAQ,EAAE,KAAK;YACf,WAAW,EAAE,IAAI;YACjB,eAAe,EAAE,IAAI;YACrB,aAAa,EAAE,KAAK;SACvB,CAAC;QAGF,eAAU,GAAG,KAAK,CAAC;QAEnB,mBAAc,GAAG,IAAI,0DAAW,EAAE,CAAC;QACnC,mBAAc,GAAG,KAAK,CAAC;QAMnB,IAAI,CAAC,QAAQ,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC;IACnE,CAAC;IAED,aAAa;QACT,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YACrD,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACnE,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC;YAC1B,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,CAAC,MAAM,CAAC;SACjC;aAAM;YACH,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;YACzB,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC;SAC/B;IACL,CAAC;IAED,QAAQ;QACJ,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAM,MAAM,EAAC,EAAE,CAAC;YACjD,IAAI;gBACA,IAAI,CAAC,IAAI,IAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAqB,EAAC;gBACtF,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC9C,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE;oBAC7B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAc,EAAE,EAAE;wBACtD,IAAI,KAAK,KAAK,IAAI;4BAAE,IAAI,CAAC,aAAa,EAAE,CAAC;oBAC7C,CAAC,CAAC,CAAC;iBACN;;oBAAM,IAAI,CAAC,aAAa,EAAE,CAAC;gBAC5B,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;oBAC3B,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CACvD,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,EAAE,IAAI,CACxD,CAAC;oBACF,IAAI,eAAe,CAAC,EAAE,EAAE;wBACpB,IAAI,CAAC,QAAQ,GAAG,eAAe,CAAC,QAAiC,CAAC;wBAClE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;qBAC9C;yBAAM;wBACH,IAAI,CAAC,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC;wBAChC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,kDAAkD,CAAC,CAAC;wBAChF,OAAO,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;qBAClC;oBACD,IAAI,CAAC,KAAK,CAAC,eAAe,GAAG,KAAK,CAAC;iBACtC;qBAAM;oBACH,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;oBACnB,IAAI,CAAC,KAAK,CAAC,eAAe,GAAG,KAAK,CAAC;iBACtC;aACJ;YAAC,OAAO,KAAK,EAAE;gBACZ,IAAI,KAAK,YAAY,kEAAY,EAAE;oBAC/B,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC;iBACnC;;oBAAM,MAAM,KAAK,CAAC;aACtB;YACD,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,KAAK,CAAC;YAC/B,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;QAClC,CAAC,EAAC,CAAC;IACP,CAAC;IAEK,QAAQ;;YACV,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE;gBAC7B,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,0CAA0C,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;gBACpF,OAAO;aACV;YACD,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE;gBAClB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBAC3E,IAAI,WAAW,CAAC,EAAE,KAAK,IAAI,EAAE;oBACzB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBACvD,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;oBACzB,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;iBACrB;;oBAAM,MAAM,IAAI,KAAK,CAAC,wCAAwC,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;aACxF;iBAAM;gBACH,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBAC3E,IAAI,WAAW,CAAC,EAAE,KAAK,IAAI,EAAE;oBACzB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;oBAC1D,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC;oBACxB,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;oBAClB,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;wBACrB,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC;wBAC5B,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;qBACxB;iBACJ;;oBAAM,MAAM,IAAI,KAAK,CAAC,wCAAwC,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;aACxF;QACL,CAAC;KAAA;IAEK,WAAW;;YACb,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE;gBAC7B,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,0CAA0C,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;gBACpF,OAAO;aACV;YACD,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;gBACrB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBAC3E,IAAI,WAAW,CAAC,EAAE,KAAK,IAAI,EAAE;oBACzB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBACvD,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC;oBAC5B,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;iBACxB;;oBAAM,MAAM,IAAI,KAAK,CAAC,wCAAwC,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;aACxF;iBAAM;gBACH,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC5E,IAAI,WAAW,CAAC,EAAE,KAAK,IAAI,EAAE;oBACzB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;oBAC3D,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC;oBAC3B,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;oBACrB,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE;wBAClB,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;wBACzB,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;qBACrB;iBACJ;;oBAAM,MAAM,IAAI,KAAK,CAAC,wCAAwC,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;aACxF;QACL,CAAC;KAAA;IAEK,WAAW,CAAC,OAA4B;;YAC1C,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE;gBAC7B,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,0CAA0C,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;gBACpF,OAAO;aACV;YACD,MAAM,SAAS,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACxE,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC;YAClF,IAAI,SAAS,IAAI,UAAU,EAAE;gBACzB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBACxE,IAAI,OAAO,CAAC,EAAE,EAAE;oBACZ,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,KAAK;wBAC9D,OAAO,CAAC,QAAQ,EAAE,CAAC;oBACvB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;oBAC3D,OAAO,CAAC,KAAK,EAAE,CAAC;iBACnB;qBAAM;oBACH,OAAO,CAAC,KAAK,CAAC,2CAA2C,OAAO,CAAC,GAAG,KAAK;wBACzE,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;oBAC9B,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,8CAA8C,CAAC,CAAC;iBAC/E;aACJ;iBAAM;gBACH,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBAC1E,IAAI,SAAS,CAAC,EAAE,EAAE;oBACd,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;oBACxD,OAAO,CAAC,KAAK,EAAE,CAAC;iBACnB;qBAAM;oBACH,OAAO,CAAC,KAAK,CAAC,6CAA6C,OAAO,CAAC,GAAG,KAAK;wBAC3E,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;oBAChC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,gDAAgD,CAAC,CAAC;iBACjF;aACJ;QACL,CAAC;KAAA;IAEK,cAAc,CAAC,OAA4B;;YAC7C,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE;gBAC7B,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,0CAA0C,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;gBACpF,OAAO;aACV;YACD,MAAM,SAAS,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACxE,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC;YAC9E,IAAI,SAAS,IAAI,OAAO,EAAE;gBACtB,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC5E,IAAI,UAAU,CAAC,EAAE,EAAE;oBACf,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,IAAI;wBAC7D,OAAO,CAAC,KAAK,EAAE,CAAC;oBACpB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;oBAC5D,OAAO,CAAC,QAAQ,EAAE,CAAC;iBACtB;qBAAM;oBACH,OAAO,CAAC,KAAK,CAAC,8CAA8C,OAAO,CAAC,GAAG,KAAK;wBAC5E,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;oBACjC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,iDAAiD,CAAC,CAAC;iBAClF;aACJ;iBAAM;gBACH,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBAC1E,IAAI,SAAS,CAAC,EAAE,EAAE;oBACd,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;oBACxD,OAAO,CAAC,QAAQ,EAAE,CAAC;iBACtB;qBAAM;oBACH,OAAO,CAAC,KAAK,CAAC,6CAA6C,OAAO,CAAC,GAAG,KAAK;wBACvE,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;oBAC/B,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,gDAAgD,CAAC,CAAC;iBACjF;aACJ;QACL,CAAC;KAAA;IAED,cAAc,CAAC,EAAU;QACrB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI;YAAE,OAAO,KAAK,CAAC;QAC9C,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC;YAAE,OAAO,KAAK,CAAC;QAC/D,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACvD,CAAC;IAED,iBAAiB,CAAC,EAAU;QACxB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI;YAAE,OAAO,KAAK,CAAC;QAC9C,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC;YAAE,OAAO,KAAK,CAAC;QAC/D,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACxD,CAAC;IAED,aAAa,CAAC,QAAgB;QAC1B,OAAO,SAAS,QAAQ,EAAE,CAAC;IAC/B,CAAC;IAEK,WAAW;;YACb,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC3B,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YAC3G,IAAI,QAAQ,CAAC,EAAE,EAAE;gBACb,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;gBAC5B,MAAM,WAAW,qBAAQ,QAAQ,CAAC,OAAO,CAAE,CAAC;gBAC5C,WAAW,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;gBAChD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAkC,CAAC,CAAC;aAChF;iBAAM;gBACH,OAAO,CAAC,KAAK,CAAC,4CAA4C,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACvF,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,kDAAkD,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;aAC/F;YACD,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAChC,CAAC;KAAA;IAED,SAAS,CAAC,IAAY;QAClB,OAAO,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,WAAW,EAAE;IAC9C,CAAC;IAED,QAAQ,CAAC,OAA4B;;QACjC,OAAO,WAAI,CAAC,QAAQ,CAAC,OAAO,0CAAE,IAAI,CAAC,GAAG,MAAK,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC;IAClE,CAAC;;0EAxOQ,aAAa;6FAAb,aAAa;QCvB1B,yEAA4B;QACxB,yEAA8C;QAC1C,yGAEM;QACN,qMA6Bc;QAClB,4DAAM;QACN,2HAEe;QACf,qMAiBc;QAClB,4DAAM;;;;QAvDQ,0DAAyB;QAAzB,uFAAyB;QAkCpB,0DAA6B;QAA7B,2FAA6B;;;;;;;;;;;;;;;;;;;;;ACnCoB;AACC;;;AAO9D,MAAM,cAAc;IAGvB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAF5B,WAAM,GAAG,0EAAG,CAAC,OAAO,CAAC;IAEW,CAAC;IAEjC,SAAS,CAAC,IAAc,EAAE,KAAa;QAC3C,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;YAAE,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3E,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;QACjC,QAAQ,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC3B,IAAI,KAAK,EAAE;YACP,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACrC,IAAI,SAAS,CAAC,MAAM,EAAE;gBAClB,MAAM,QAAQ,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC;gBACnC,QAAQ,IAAI,IAAI,QAAQ,IAAI,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC;gBAC9C,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,QAAQ,IAAI,IAAI,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;aACjE;SACJ;QACD,OAAO,QAAQ,CAAC;IACpB,CAAC;IAEa,OAAO,CACjB,MAAc,EACd,IAAc,EACd,KAAa,EACb,IAAY,EACZ,OAAgB;;YAEhB,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACxC,OAAO,CAAC,GAAG,CAAC,SAAS,MAAM,IAAI,GAAG,EAAE,CAAC,CAAC;YAEtC,IAAI;gBACA,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAI,MAAM,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC;aACjF;YAAC,OAAO,KAAK,EAAE;gBACZ,IAAI,KAAK,YAAY,sEAAiB,EAAE;oBACpC,IAAI,KAAK,CAAC,KAAK,YAAY,aAAa,EAAE;wBACtC,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;qBACnC;oBACD,IAAI,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;wBACzE,OAAO,KAAK,CAAC,KAAK,CAAC;qBACtB;iBACJ;gBACD,OAAO,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;gBACtC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBACnB,MAAM,KAAK,CAAC;aACf;QACL,CAAC;KAAA;IAEK,GAAG,CAAI,IAAc,EAAE,QAAgB,EAAE,EAAE,UAAmB,EAAE;;YAClE,OAAO,MAAM,IAAI,CAAC,OAAO,CAAI,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;QAClE,CAAC;KAAA;IAEK,IAAI,CAAI,IAAc,EAAE,OAAe,EAAE,EAAE,UAAmB,EAAE;;YAClE,OAAO,MAAM,IAAI,CAAC,OAAO,CAAI,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QAClE,CAAC;KAAA;IAEK,MAAM,CAAI,IAAc,EAAE,UAAmB,EAAE;;YACjD,OAAO,MAAM,IAAI,CAAC,OAAO,CAAI,QAAQ,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;QAClE,CAAC;KAAA;IAEK,KAAK,CAAI,IAAc,EAAE,IAAY,EAAE,UAAmB,EAAE;;YAC9D,OAAO,MAAM,IAAI,CAAC,OAAO,CAAI,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QACnE,CAAC;KAAA;;4EA7DQ,cAAc;iGAAd,cAAc,WAAd,cAAc,mBADD,MAAM;;;;;;;;;;;;;ACRhC;AAAA;AAAA;AAAA;AAAA,wCAAgC;AACC;AACC;;;;;;;;;;;;;;;;;ACK3B,MAAM,eAAe;IAIxB;QAFS,UAAK,GAAG,cAAc,CAAC;IAEhB,CAAC;IAEjB,QAAQ;IACR,CAAC;;8EAPQ,eAAe;+FAAf,eAAe;QCP5B,wEAAqB;QAAA,uDAAW;QAAA,4DAAK;QACrC,qEAAI;QAAA,8DAAG;QAAA,4DAAK;QACZ,yEAAqD;QACjD,4EAAmC;QAAA,iEAAM;QAAA,4DAAS;QAClD,+EAAc;QAAA,iEAAM;QAAA,4DAAe;QACvC,4DAAM;;QALe,0DAAW;QAAX,0EAAW;;;;;;;;;;;;;;ACAhC;AAAA;AAAA;AAAA;AAAqD;;;;;;;;;;;;;;;;;ACG9C,MAAM,WAAW;IACpB,SAAS,CAAC,GAAW;QACjB,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QACvB,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC;QAClC,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;QACpE,IAAI,OAAO,GAAG,EAAE;YAAE,OAAO,GAAG,OAAO,IAAI,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QAC9E,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,EAAE,CAAC,CAAC;QACzC,IAAI,OAAO,GAAG,EAAE;YAAE,OAAO,GAAG,OAAO,IAAI,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QAC9E,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,EAAE,CAAC,CAAC;QACvC,IAAI,KAAK,GAAG,EAAE;YAAE,OAAO,GAAG,KAAK,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QACpE,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC;QACpC,OAAO,GAAG,IAAI,IAAI,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;IACpD,CAAC;;sEAZQ,WAAW;wGAAX,WAAW;;;;;;;;;;;;;ACHxB;AAAA;AAAA;AAAA;AAAiF;;;;;;;;;;;;;ACAjF;AAAA;AAAO,SAAS,cAAc,CAAC,QAAgB;IAC3C,KAAK,MAAM,SAAS,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;QAC3C,QAAQ,SAAS,EAAE;YACf,KAAK,WAAW;gBACZ,OAAO,iBAAiB,CAAC;YAC7B,KAAK,UAAU;gBACX,OAAO,yBAAyB,CAAC;YACrC,KAAK,cAAc;gBACf,OAAO,kBAAkB,QAAQ,CAAC,SAAS,CAAC,CAAC,YAAY,GAAG,CAAC;YACjE;gBACI,OAAO,UAAU,SAAS,EAAE,CAAC;SACpC;KACJ;AACL,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICNO,gEAA6C;;;IAC7C,4EAAmF;;;;IAE/E,6EAA6I;IAAxC,iTAAS,oCAA6B,IAAC;IAAC,sEAAW;IAAA,4DAAS;;;;IAI7J,0EAAgF;IAC5E,yEAAuB;IAAA,uDAAgB;IAAA,4DAAK;IAC5C,wEAAwB;IAAA,uDAAkB;IAAA,4DAAI;IAClD,4DAAM;;;IAHuC,+FAAkC;IACpD,0DAAgB;IAAhB,+EAAgB;IACf,0DAAkB;IAAlB,iFAAkB;;;IANlD,kIAAiK;IACjK,wNACc;IACd,0EAA4B;IACxB,4HAGM;IACV,4DAAM;;;;IAR8D,sFAAqB;IAIlD,0DAAQ;IAAR,iFAAQ;;ACApD,MAAM,gBAAgB;IASzB,YAAoB,KAAY,EACZ,IAAiB,EAClB,MAAqB,EACpB,KAAqB,EACrB,GAAe;QAJf,UAAK,GAAL,KAAK,CAAO;QACZ,SAAI,GAAJ,IAAI,CAAa;QAClB,WAAM,GAAN,MAAM,CAAe;QACpB,UAAK,GAAL,KAAK,CAAgB;QACrB,QAAG,GAAH,GAAG,CAAY;QARnC,iBAAY,GAAG,IAAI,CAAC;QAShB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;IAC3E,CAAC;IAED,WAAW;QACP,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;IAClC,CAAC;IAED,QAAQ;QACJ,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAM,MAAM,EAAC,EAAE,CAAC;YACxC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;YAChC,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;YACzE,IAAI,WAAW,CAAC,EAAE,KAAK,IAAI,EAAE;gBACzB,MAAM,IAAI,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAClC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC;gBACnB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;gBAClC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC;gBACrC,IAAI,CAAC,YAAY,EAAE,CAAC;gBACpB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;aAChD;;gBAAM,MAAM,IAAI,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC9C,CAAC,EAAC,CAAC;IACP,CAAC;IAEK,YAAY;;YACd,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;YACpC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC7B,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,EAAE;oBACjB,OAAO,CAAC,CAAC;iBACZ;qBAAM,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,EAAE;oBACxB,OAAO,CAAC,CAAC,CAAC;iBACb;qBAAM;oBACH,OAAO,CAAC,CAAC;iBACZ;YACL,CAAC,CAAC,CAAC;QACP,CAAC;KAAA;IAEK,QAAQ;;YACV,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YACzB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAC3D,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;YAC1B,OAAO,QAAQ,CAAC;QACpB,CAAC;KAAA;;gFAtDQ,gBAAgB;gGAAhB,gBAAgB;QDd7B,yEAAuB;QACnB,8EAA0B;QACtB,wEAAwB;QAAA,uDAAgB;QAAA,4DAAK;QAC7C,yEAAuB;QACnB,oEAAoD;QACpD,wEAAqB;QAAA,uDAAc;QAAA,4DAAK;QAC5C,4DAAM;QACN,0GAA6C;QAC7C,4HAAmF;QACnF,0MAUc;QAClB,4DAAW;QACf,4DAAM;;;QAnB0B,0DAAgB;QAAhB,+EAAgB;QAGf,0DAAc;QAAd,6EAAc;QAElC,0DAAsC;QAAtC,0GAAsC;QAC7B,0DAAoB;QAApB,kFAAoB;;;;;;;;;;;;;;AER1C;AAAA;AAAA;AAAA;AAAgE;;;;;;;;;;;;;ACAhE;AAAA,0DAA0D;;;;;;;;;;;;;;ACA1D;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;IACjB,OAAO,EAAE,uBAAuB;CACjC,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;;;;;;;;;;;;ACbX;AACC;AAE0E;AACsC;;;;;AAKlK,MAAM,aAAa;IAOtB,YAAoB,MAAiB,EAAU,MAAc,EAAU,OAA2B;QAA9E,WAAM,GAAN,MAAM,CAAW;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAU,YAAO,GAAP,OAAO,CAAoB;QAC9F,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;YACjC,IAAI,KAAK,YAAY,6DAAa,EAAE;gBAChC,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;aAC9D;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,UAAU,CAAI,SAA2B,EAAE,WAAmB,EAAE,OAAgB;QACpF,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;QAChE,OAAO,SAAS,CAAC;IACrB,CAAC;IAED,iBAAiB,CAAC,SAOd,EAAE,KAAK,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE;QAElG,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,8HAAwB,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;QAC5E,MAAM,QAAQ,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAC1C,QAAQ,CAAC,SAAS,GAAG,MAAM,CAAC;QAC5B,IAAI,MAAM,CAAC,KAAK;YAAE,QAAQ,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;QAChD,IAAI,MAAM,CAAC,WAAW;YAAE,QAAQ,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;QAClE,IAAI,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM;YAAE,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QAC3E,IAAI,MAAM,CAAC,QAAQ;YAAE,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;QAChF,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,oBAAoB;QAChB,MAAM,YAAY,GAAG,IAAI,0DAAW,CAAC,IAAI,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;QAClE,MAAM,cAAc,GAAG,IAAI,0DAAW,CAAC,IAAI,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;QACpE,IAAI,CAAC,iBAAiB,CAAC;YACnB,KAAK,EAAE,aAAa;YACpB,MAAM,EAAE;gBACJ,EAAE,OAAO,EAAE,OAAO,EAAM,IAAI,EAAE,aAAa,EAAI,KAAK,EAAE,OAAO,EAAI,WAAW,EAAE,YAAY,EAAE;gBAC5F,EAAE,OAAO,EAAE,WAAW,EAAE,IAAI,EAAE,eAAe,EAAE,KAAK,EAAE,SAAS,EAAE,WAAW,EAAE,cAAc,EAAE;aACjG;YACD,QAAQ,EAAE,CAAM,GAAG,EAAC,EAAE,CAAC;gBACvB,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;gBACnB,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,YAAY,CAAC,KAAK,EAAE,cAAc,CAAC,KAAK,CAAC,CAAC;gBACnG,IAAI,kBAAkB,CAAC,EAAE,KAAK,IAAI,EAAE;oBAChC,GAAG,CAAC,WAAW,EAAE,CAAC;iBACrB;;oBAAM,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;YACjD,CAAC;SACJ,CAAC,CAAC;IACP,CAAC;IAED,kBAAkB;QACd,IAAI,CAAC,IAAI,CAAC,cAAc;YAAE,IAAI,CAAC,UAAU,CAAC,4FAA4B,EAAE,UAAU,CAAC,CAAC;IACxF,CAAC;IAED,eAAe;QACX,IAAI,CAAC,IAAI,CAAC,WAAW;YAAE,IAAI,CAAC,UAAU,CAAC,oFAAoB,EAAE,OAAO,CAAC,CAAC;IAC1E,CAAC;IAED,wBAAwB;QACpB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,6FAA6B,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;IAC1E,CAAC;IAED,uBAAuB;QACnB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,mGAAmC,CAAC,CAAC;IAC1D,CAAC;;0EAzEQ,aAAa;gGAAb,aAAa,WAAb,aAAa,mBAFV,MAAM;;;;;;;;;;;;;;;;;;ACRf,MAAM,yBAAyB,GAAG,aAAa,CAAC;AAKhD,MAAM,mBAAmB;IAC5B,KAAK,CAAC,GAAW,EAAE,IAAY;QAC3B,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IACpD,CAAC;IAED,IAAI,CAAI,GAAW;QACf,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;QACnD,OAAO,IAAI,IAAI,IAAI,CAAC;IACxB,CAAC;IAED,MAAM,CAAC,GAAW;QACd,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;IACjC,CAAC;;sFAZQ,mBAAmB;sGAAnB,mBAAmB,WAAnB,mBAAmB,mBAFhB,MAAM;;;;;;;;;;;;;ACLtB;AAAA;AAAO,SAAS,kBAAkB,CAAC,QAAgB,EAAE,QAAgB;IACjE,OAAO,SAAS,IAAI,CAAC,GAAG,QAAQ,IAAI,QAAQ,EAAE,CAAC,EAAE,CAAC;AACtD,CAAC;;;;;;;;;;;;;;;;;;;;ACAwD;;;AAElD,MAAM,YAAa,SAAQ,KAAK;IACnC,YAAY,OAAe,EAAS,KAAiC;QACjE,KAAK,CAAC,OAAO,CAAC,CAAC;QADiB,UAAK,GAAL,KAAK,CAA4B;IAErE,CAAC;CACJ;AAKM,MAAM,WAAW;IAGpB,YAAoB,GAAe;QAAf,QAAG,GAAH,GAAG,CAAY;QAFnC,eAAU,GAAG,IAAI,0DAAY,EAAU,CAAC;IAED,CAAC;IAE3B,gBAAgB,CAAC,EAAU,EAAE,iBAAiB,GAAG,KAAK;;YAC/D,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,QAAQ,iBAAG,MAAM,EAAE,EAAE,IAAK,iBAAiB,IAAI,EAAE,OAAO,EAAE,YAAY,EAAE,EAAG,CAAC;YAChH,IAAI,YAAY,CAAC,EAAE,KAAK,IAAI,EAAE;gBAC1B,OAAO,YAAY,CAAC,KAAK,CAAC;aAC7B;iBAAM;gBACH,OAAO,CAAC,KAAK,CAAC,iCAAiC,YAAY,CAAC,KAAK,EAAE,CAAC,CAAC;gBACrE,OAAO,EAAE,CAAC;aACb;QACL,CAAC;KAAA;IAEK,WAAW,CAAC,EAAU,EAAE,iBAAiB,GAAG,KAAK;;YACnD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,QAAQ,iBAAG,EAAE,IAAK,iBAAiB,IAAI,EAAE,OAAO,EAAE,YAAY,EAAE,EAAG,CAAC;YACvG,IAAI,WAAW,CAAC,EAAE,KAAK,IAAI,EAAE;gBACzB,OAAO,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;aAC/B;;gBAAM,MAAM,IAAI,YAAY,CAAC,+BAA+B,EAAE,KAAK,WAAW,CAAC,KAAK,EAAE,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;QAChH,CAAC;KAAA;;sEApBQ,WAAW;8FAAX,WAAW,WAAX,WAAW,mBAFR,MAAM;;;;;;;;;;;;;;;;;ACJf,MAAM,iBAAiB;IAE5B,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;kFALU,iBAAiB;iGAAjB,iBAAiB;QCP9B,oEAAG;QAAA,2EAAgB;QAAA,4DAAI;;;;;;;;;;;;;;;;;;;;;ACAkC;AAejB;;;;AAOjC,MAAM,kBAAkB;IAO3B,YAAoB,EAAuB,EAAU,GAAe;QAAhD,OAAE,GAAF,EAAE,CAAqB;QAAU,QAAG,GAAH,GAAG,CAAY;QALpE,SAAI,GAAS,IAAI,CAAC;QAClB,WAAM,GAAG,IAAI,0DAAY,EAAoB,CAAC;QAC9C,eAAU,GAAG,IAAI,GAAG,EAAmB,CAAC;QACxC,kBAAa,GAAG,IAAI,GAAG,EAAmB,CAAC;IAE6B,CAAC;IAEnE,KAAK,CAAC,QAAgB,EAAE,QAAgB;;YAC1C,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YACzE,IAAI,mBAAmB,CAAC,EAAE,EAAE;gBACxB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBACzB,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;gBACzD,IAAI,UAAU,CAAC,EAAE,EAAE;oBACf,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAChC,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;oBAC1C,IAAI,WAAW,CAAC,EAAE,EAAE;wBAChB,KAAK,MAAM,MAAM,IAAI,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK;4BAC9C,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;wBACtC,KAAK,MAAM,MAAM,IAAI,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ;4BACjD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;wBACvC,KAAK,MAAM,SAAS,IAAI,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK;4BACpD,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;wBAC5C,KAAK,MAAM,SAAS,IAAI,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ;4BACvD,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;qBAChD;yBAAM;wBACH,OAAO,CAAC,KAAK,CAAC,sDAAsD;4BACpE,uBAAuB,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;wBACvD,OAAO,KAAK,CAAC;qBAChB;oBACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;iBAC9B;qBAAM;oBACH,OAAO,CAAC,KAAK,CAAC,wDAAwD;wBACtE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;oBAC5B,OAAO,KAAK,CAAC;iBAChB;gBACD,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,wFAAyB,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC;gBACjE,OAAO,IAAI,CAAC;aACf;YACD,OAAO,KAAK,CAAC;QACjB,CAAC;KAAA;IAED,MAAM;QACF,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,wFAAyB,CAAC,CAAC;QAC1C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAChC,CAAC;IAEK,UAAU;;YACZ,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxF,IAAI,kBAAkB,CAAC,EAAE,KAAK,IAAI;gBAAE,IAAI,CAAC,MAAM,EAAE,CAAC;YAClD,OAAO,kBAAkB,CAAC;QAC9B,CAAC;KAAA;IAED,KAAK,CAAC,OAIL;QACG,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IACtE,CAAC;IAED,UAAU,CAAC,KAAa,EAAE,OAAe;QACrC,OAAO,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IAClF,CAAC;IAED,QAAQ,CAAC,MAAc,EAAE,MAAkB;QACvC,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IAChF,CAAC;IAED,QAAQ;QACJ,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC/E,CAAC;IAED,WAAW,CAAC,UAA8B,EAAE,QAAgB,EAAE,OAAe;QACzE,OAAO,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IAClG,CAAC;IAED,WAAW,CAAC,SAAiB,EAAE,MAAkB;QAC7C,OAAO,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;IACtF,CAAC;IAED,eAAe,CAAC,WAAmB;QAC/B,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC;QACjC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,wFAAyB,EAAE,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IACjG,CAAC;IAED,eAAe,CAAC,QAAgB;QAC5B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,wFAAyB,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QACpG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IACxC,CAAC;;oFA5FQ,kBAAkB;qGAAlB,kBAAkB,WAAlB,kBAAkB,mBAFf,MAAM;;;;;;;;;;;;;ACpBtB;AAAA;AAAA;AAAA;AAAgE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACWzD,MAAM,mCAAmC;IAG5C,YAAoB,MAAiB,EACjB,MAAc,EACd,QAAyB,EACzB,OAA2B;QAH3B,WAAM,GAAN,MAAM,CAAW;QACjB,WAAM,GAAN,MAAM,CAAQ;QACd,aAAQ,GAAR,QAAQ,CAAiB;QACzB,YAAO,GAAP,OAAO,CAAoB;QAL/C,8BAAyB,GAAG,KAAK,CAAC;IAKiB,CAAC;IAE9C,aAAa;;YACf,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;YACtC,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;YAC1D,IAAI,iBAAiB,CAAC,EAAE,KAAK,IAAI,EAAE;gBAC/B,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;gBACvC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;gBACvB,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;gBACtB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,+BAA+B,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;gBAChE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;aAC9B;;gBAAM,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;QACpD,CAAC;KAAA;;sHAlBQ,mCAAmC;mHAAnC,mCAAmC;QCXhD,wEAAqB;QAAA,wGAA6C;QAAA,4DAAK;QACvE,yEAAwB;QACpB,oEAAG;QAAA,mHAAwD;QAAA,4DAAI;QACnE,4DAAM;QACN,yEAAwB;QACpB,4EAAmC;QAAA,iEAAM;QAAA,4DAAS;QAClD,kFAA+F;QAA1B,iKAAS,mBAAe,IAAC;QAAC,iEAAM;QAAA,4DAAe;QACxH,4DAAM;;QADY,0DAAgB;QAAhB,yEAAgB;;;;;;;;;;;;;;ACLlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6C;;;;;;;ICGrC,0EAAiD;IAAA,uDAAW;IAAA,4DAAO;;;IAAlB,0DAAW;IAAX,yEAAW;;;IADhE,4EAA+B;IAC3B,4HAAmE;IACvE,4DAAY;;;IAD8B,0DAAS;IAAT,kFAAS;;ADIhD,MAAM,kBAAkB;IAa3B;QAXS,cAAS,GAAG,MAAM,CAAC;QACnB,UAAK,GAAG,YAAY,CAAC;QAErB,YAAO,GAAG,IAAI,0DAAW,EAAE,CAAC;QAE5B,kBAAa,GAAyB,KAAK,CAAC;QAE5C,aAAQ,GAAG,IAAI,GAAG,EAAkB,CAAC;QAE9C,WAAM,GAAa,EAAE,CAAC;IAEN,CAAC;IAEjB,QAAQ;QACJ,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAClC,IAAI,IAAI,CAAC,aAAa,KAAK,UAAU,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YAC1D,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;SAC1F;IACL,CAAC;IAED,WAAW,CAAC,KAAa;QACrB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,KAAK,EAAE,CAAC;IACnF,CAAC;IAED,SAAS;QACL,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,QAAQ,IAAI,CAAC,aAAa,EAAE;YACxB,KAAK,MAAM;gBACP,OAAO,KAAK,CAAC;YACjB,KAAK,KAAK;gBACN,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;oBACrB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAC7F,OAAO,IAAI,CAAC;iBACf;qBAAM;oBACH,OAAO,KAAK,CAAC;iBAChB;YACL,KAAK,UAAU;gBACX,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;oBACrB,IAAI,SAAiB,CAAC;oBACtB,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,aAAa,EAAE;wBACpC,SAAS,GAAG,KAAK,CAAC;wBAClB,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,SAAS,EAAE;4BAC1C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;4BAC1C,OAAO,IAAI,CAAC;yBACf;qBACJ;oBACD,MAAM,IAAI,KAAK,CAAC,6CAA6C,SAAS,oCAAoC,CAAC,CAAC;iBAC/G;qBAAM;oBACH,OAAO,KAAK,CAAC;iBAChB;SACR;IACL,CAAC;;oFArDQ,kBAAkB;kGAAlB,kBAAkB;QCR/B,iFAAgB;QACZ,4EAAW;QAAA,uDAAW;QAAA,4DAAY;QAClC,sEAAsE;QACtE,0HAEY;QAChB,4DAAiB;;QALF,0DAAW;QAAX,0EAAW;QACN,0DAAkB;QAAlB,+EAAkB;QACtB,0DAAiB;QAAjB,iFAAiB;;;;;;;;;;;;;;ACHjC;AAAA;AAAA;AAAA;AAAmF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACMsB;;;;;;;;;;;;;;ICA7F,4EAAwD;IACpD,uFACJ;IAAA,4DAAY;;;IAMZ,4EAAwD;IACpD,uFACJ;IAAA,4DAAY;;;IAYpB,4EAAiC;IAAA,uDAAmB;IAAA,4DAAY;;;IAA/B,0DAAmB;IAAnB,qFAAmB;;ADfjD,MAAM,4BAA4B;IASrC,YAAoB,MAAkD,EAClD,GAAe,EACf,QAAqB,EACrB,IAAwB,EACxB,MAAc;QAJd,WAAM,GAAN,MAAM,CAA4C;QAClD,QAAG,GAAH,GAAG,CAAY;QACf,aAAQ,GAAR,QAAQ,CAAa;QACrB,SAAI,GAAJ,IAAI,CAAoB;QACxB,WAAM,GAAN,MAAM,CAAQ;QAX3B,oBAAe,GAAG,KAAK,CAAC;QACxB,2BAAsB,GAAG,IAAI,GAAG,EAAkB,CAAC;QACnD,gCAA2B,GAAG,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;QACxD,oBAAe,GAAG,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC7D,oBAAe,GAAG,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC7D,0BAAqB,GAAG,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAOrH,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,UAAU,EAAE,6BAA6B,CAAC,CAAC;QAC3E,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,WAAW,EAAE,wBAAwB,CAAC,CAAC;IAC3E,CAAC;IAEO,kBAAkB,CAAC,SAA0B;QACjD,OAAO,CAAC,OAAwB,EAA2B,EAAE;YACzD,MAAM,SAAS,GAAG,SAAS,CAAC,KAAK,KAAK,OAAO,CAAC,KAAK,CAAC;YACpD,OAAO,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;QACnD,CAAC,CAAC;IACN,CAAC;IAEY,aAAa;;YACtB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;YAC5B,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YACxG,IAAI,eAAe,CAAC,EAAE,EAAE;gBACpB,MAAM,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;gBAC9E,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;gBAC7B,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;gBACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,mCAAmC,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;gBAClF,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;aAC3D;iBAAM;gBACH,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;gBAC7B,IAAI,CAAC,aAAa,GAAI,eAAuB,CAAC,KAAK,CAAC;gBACpD,OAAO,CAAC,GAAG,CAAC,sDAAsD,GAAI,eAAuB,CAAC,KAAK,CAAC,CAAC;aACxG;QACL,CAAC;KAAA;;wGAvCQ,4BAA4B;4GAA5B,4BAA4B;QCbzC,wEAAqB;QAAA,mEAAQ;QAAA,4DAAK;QAClC,yEAAwB;QACpB,0EAA4B;QACxB,iFAAgB;QACZ,4EAAW;QAAA,mEAAQ;QAAA,4DAAY;QAC/B,yEAA4D;QAC5D,oIAEY;QAChB,4DAAiB;QAEjB,kFAAgB;QACZ,6EAAW;QAAA,oEAAQ;QAAA,4DAAY;QAC/B,0EAA4E;QAC5E,sIAEY;QAChB,4DAAiB;QAEjB,kFAMmB;QACvB,4DAAO;QAEP,sIAAgE;QAChE,mFAIkC;QAA1B,2JAAS,mBAAe,IAAC;QAC7B,4EACJ;QAAA,4DAAe;QACnB,4DAAM;;QA/BsB,0DAA+B;QAA/B,4FAA+B;QACnC,0DAA0C;QAA1C,0GAA0C;QAOtB,0DAA+B;QAA/B,4FAA+B;QACnD,0DAA0C;QAA1C,0GAA0C;QAOtD,0DAAiC;QAAjC,8FAAiC;QAO7B,0DAAmB;QAAnB,mFAAmB;QAGvB,0DAA6F;QAA7F,kKAA6F;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9B5D;;;;;;;;;;;ICC7C,wEAA6C;IACzC,yEAAwB;IACpB,oEAAG;IAAA,2HAAgE;IAAA,4DAAI;IACvE,iFAGuD;IAC3D,4DAAM;IACN,yEAAiC;IAC7B,4EAAmC;IAAA,iEAAM;IAAA,4DAAS;IAClD,kFAAoE;IAA5B,uVAA2B;IAAC,iEAAM;IAAA,4DAAe;IAC7F,4DAAM;IACV,qEAAe;;;IARH,0DAAoB;IAApB,6EAAoB;IAMV,0DAAyB;IAAzB,yFAAyB;;;IAK3C,yEAA2B;;ADPxB,MAAM,6BAA6B;IAItC,YAAoB,OAA2B,EAAU,MAAiB;QAAtD,YAAO,GAAP,OAAO,CAAoB;QAAU,WAAM,GAAN,MAAM,CAAW;QAH1E,aAAQ,GAAG,KAAK,CAAC;QACjB,wBAAmB,GAAG,IAAI,0DAAW,EAAE,CAAC;IAEqC,CAAC;IAE9E,QAAQ;QACJ,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;QACpC,IAAI,CAAC,IAAI,CAAC,QAAQ;YAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAc,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAC;IACjG,CAAC;IAED,WAAW;QACP,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC;IACtC,CAAC;IAED,SAAS;QACL,OAAO,IAAI,CAAC,mBAAmB,CAAC,KAAK,KAAK,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC;IACzE,CAAC;IAEK,cAAc;;YAChB,MAAM,WAAW,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC;YACnD,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC,CAAC;YAC1E,IAAI,aAAa,CAAC,EAAE,EAAE;gBAClB,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;gBAC1C,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;aAC1B;QACL,CAAC;KAAA;;0GA1BQ,6BAA6B;6GAA7B,6BAA6B;QCV1C,wEAAqB;QAAA,0EAAe;QAAA,4DAAK;QAEzC,4IAYe;QAEf,qNAEc;;;QAhBC,0DAAgB;QAAhB,8EAAgB;;;;;;;;;;;;;;;;;;ACCxB,MAAM,eAAe;IACxB,SAAS,CAAC,GAAW;QACjB,MAAM,SAAS,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;QACjC,IAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACnD,IAAI,KAAK,GAAG,EAAE,CAAC;QACf,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,KAAK,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;YAC5C,OAAO,EAAE,CAAC;YACV,KAAK,IAAI,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,OAAO,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;gBAC5B,KAAK,IAAI,GAAG,CAAC;SACpB;QACD,OAAO,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC9C,CAAC;;8EAbQ,eAAe;gHAAf,eAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACE8E;;;;;;;;;;;;;;;ICDtG,4EAAiF;IAAzD,8RAAS,oCAA6B,IAAC;IAC3D,2EAAW;IAAA,8DAAG;IAAA,4DAAW;IAC7B,4DAAS;;;IAEL,6EAAiH;;IAA3E,wEAAe;;;IACxB,kEAAO;;;;IAFxC,4EAA8F;IAAnC,+RAAS,+BAAwB,IAAC;IACzF,kIAAiH;IACjH,8MAAkD;IACtD,4DAAS;;;;IAFkD,0DAAuB;IAAvB,wFAAuB;;;;IAK9E,6EAA4D;IAAA,uDAAc;IAAA,4DAAS;IACnF,qFAA2B;IACvB,6EAAyD;IAAA,kEAAO;IAAA,4DAAS;IACzE,6EAAiD;IAAA,mEAAQ;IAAA,4DAAS;IAClE,6EAAiD;IAA3B,qSAAS,wBAAgB,IAAC;IAAC,mEAAQ;IAAA,4DAAS;IACtE,4DAAW;;;;IALQ,sFAAwC;IAAC,0DAAc;IAAd,gFAAc;IAEhD,0DAAkC;IAAlC,kGAAkC;IAClC,0DAA0B;IAA1B,mFAA0B;;ADJrD,MAAM,aAAa;IAKtB,YAAmB,MAAqB,EACpB,KAAqB,EACrB,KAAsB,EACvB,OAA2B,EAC1B,YAAiC;QAJlC,WAAM,GAAN,MAAM,CAAe;QACpB,UAAK,GAAL,KAAK,CAAgB;QACrB,UAAK,GAAL,KAAK,CAAiB;QACvB,YAAO,GAAP,OAAO,CAAoB;QAC1B,iBAAY,GAAZ,YAAY,CAAqB;QARrD,aAAQ,GAAG,EAAE,CAAC;QACd,aAAQ,GAAG,KAAK,CAAC;QACjB,oBAAe,GAAG,KAAK,CAAC;IAMiC,CAAC;IAEpD,QAAQ;;YACV,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;gBACrC,IAAI,CAAC,KAAK,CAAC,MAAM;oBAAE,OAAO;gBAC1B,QAAQ,KAAK,CAAC,MAAM,EAAE;oBAClB,KAAK,OAAO;wBACR,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC;wBAC9B,MAAM;oBACV;wBACI,MAAM,IAAI,KAAK,CAAC,yCAAyC,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC;iBAClF;YACL,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAuB,EAAE,EAAE;gBACtD,QAAQ,KAAK,EAAE;oBACX,KAAK,QAAQ;wBACT,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;wBACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC;wBAC3C,MAAM;oBACV,KAAK,SAAS;wBACV,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;wBACtB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;wBACrB,MAAM;oBACV,KAAK,iBAAiB;wBAClB,MAAM;iBACb;YACL,CAAC,CAAC,CAAC;YAEH,kEAAkE;YAClE,IAAI;gBACA,MAAM,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAM,kGAAyB,CAAC,CAAC;gBAC7E,IAAI,aAAa,EAAE;oBACf,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;oBAC5B,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,QAAQ,CAAC,CAAC;oBACvF,IAAI,CAAC,KAAK,EAAE;wBACR,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,sCAAsC,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;wBACrE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,kGAAyB,CAAC,CAAC;qBACvD;oBACD,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;iBAChC;aACJ;YAAC,OAAO,KAAK,EAAE;gBACZ,IAAI,KAAK,CAAC,OAAO,KAAK,cAAc,EAAE;oBAClC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,8CAA8C,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;oBAC7E,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;iBAChC;qBAAM;oBACH,MAAM,KAAK,CAAC;iBACf;aACJ;QACL,CAAC;KAAA;;0EAzDQ,aAAa;6FAAb,aAAa;QCZ1B,iFAA6B;QAEzB,0EAAmC;QAAA,mEAAQ;QAAA,4DAAO;QAClD,qEAA4B;QAC5B,+GAES;QACT,+GAGS;QAET,sMAOc;QAElB,4DAAc;QACd,2EAA+B;;;QAlBsC,0DAAc;QAAd,8EAAc;QAGtE,0DAAiB;QAAjB,+EAAiB;;;;;;;;;;;;;;ACP9B;AAAA,0DAA0D;;;;;;;;;;;;;;ACE1D;AAAA;AAAA;AAAO,SAAS,kBAAkB,CAAC,SAA0B;IACzD,OAAO,CAAC,OAAwB,EAAoB,EAAE;QAClD,MAAM,SAAS,GAAG,SAAS,CAAC,KAAK,KAAK,OAAO,CAAC,KAAK,CAAC;QACpD,OAAO,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,EAAC,CAAC;IACrE,CAAC,CAAC;AACN,CAAC;AAEM,SAAS,cAAc,CAAC,KAAa;IACxC,OAAO,CAAC,OAAwB,EAAoB,EAAE;QAClD,OAAO,OAAO,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACpC,YAAY,EAAE;gBACV,YAAY,EAAE,OAAO,CAAC,KAAK;gBAC3B,YAAY,EAAE,KAAK;aACtB;SACJ,CAAC;IACN,CAAC,CAAC;AACN,CAAC;;;;;;;;;;;;;;;;;ACfM,MAAM,gBAAgB;IACzB,SAAS,CAAC,MAAc;QACpB,IAAI,MAAM,GAAG,IAAI;YAAE,OAAO,MAAM,CAAC,QAAQ,EAAE,CAAC;QAC5C,IAAI,MAAM,GAAG,OAAO;YAAE,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QAC9D,IAAI,MAAM,GAAG,UAAU;YAAE,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QACpE,OAAO,CAAC,MAAM,GAAG,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;IAClD,CAAC;;gFANQ,gBAAgB;kHAAhB,gBAAgB;;;;;;;;;;;;;ACD7B;AAAA;AAAA;AAAA;AAAA;AAA+D;;;AAiBxD,MAAM,UAAU;IACnB,YAAoB,IAAoB;QAApB,SAAI,GAAJ,IAAI,CAAgB;IAAG,CAAC;IAE5C,QAAQ,CAAC,QAAgB,EAAE,QAAgB;QACvC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC,EAAE,EAAE,EAAE;YACjD,aAAa,EAAE,oFAAkB,CAAC,QAAQ,EAAE,QAAQ,CAAC;SACxD,CAAC,CAAC;IACP,CAAC;IAED,SAAS,CAAC,QAAgB,EAAE,QAAgB;QACxC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,WAAW,CAAC,EAAE,EAAE,EAAE;YAC5C,aAAa,EAAE,oFAAkB,CAAC,QAAQ,EAAE,QAAQ,CAAC;SACxD,CAAC,CAAC;IACP,CAAC;IAED,UAAU,CAAC,QAAgB,EAAE,QAAgB;QACzC,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE;YACrC,aAAa,EAAE,oFAAkB,CAAC,QAAQ,EAAE,QAAQ,CAAC;SACxD,CAAC,CAAC;IACP,CAAC;IAED,KAAK,CAAC,QAAgB,EAAE,QAAgB,EAAE,OAIzC;QACG,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC,EAAE,OAAO,EAAE;YACvD,aAAa,EAAE,oFAAkB,CAAC,QAAQ,EAAE,QAAQ,CAAC;SACxD,CAAC,CAAC;IACP,CAAC;IAED,QAAQ,CAAC,KAAuF;QAE5F,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,OAAO,CAAC,EAAE,KAAK,CAAC,CAAC;IAClD,CAAC;IAED,UAAU,CAAC,QAAgB,EAAE,QAAgB,EAAE,KAAa,EAAE,OAAe;QACzE,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,EACrD,EAAE,aAAa,EAAE,oFAAkB,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAC5D,CAAC;IACN,CAAC;IAED,QAAQ,CAAC,QAAgB,EAAE,QAAgB,EAAE,MAAc,EAAE,MAAkB;QAC3E,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,EAAE,MAAM,EAAE,EAC7D,EAAE,aAAa,EAAE,oFAAkB,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAC5D,CAAC;IACN,CAAC;IAED,QAAQ,CAAC,QAAgB,EAAE,QAAgB,EAAE,GAAW;QACpD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,OAAO,EAAE,GAAG,CAAC,EAAE,EAAE,EAC1C,EAAE,aAAa,EAAE,oFAAkB,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAC5D,CAAC;IACN,CAAC;IAED,QAAQ,CAAC,QAAmF,EAAE;QAE1F,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,OAAO,CAAC,8DAC7B,KAAK,CAAC,EAAE,IAAK,EAAE,EAAE,EAAE,KAAK,CAAC,EAAE,EAAE,GAC7B,KAAK,CAAC,GAAG,IAAI,EAAE,GAAG,EAAE,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GACzC,KAAK,CAAC,QAAQ,IAAK,EAAE,QAAQ,EAAE,KAAK,CAAC,QAAQ,EAAE,GAC/C,KAAK,CAAC,SAAS,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,EACjE,CAAC;IACP,CAAC;IAED,WAAW,CAAC,QAAgB,EAAE,QAAgB,EAAE,UAA8B,EAAE,QAAgB,EAAE,OAAe;QAE7G,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CACjB,CAAC,KAAK,EAAE,SAAS,EAAE,UAAU,EAAE,QAAQ,CAAC,EACxC,EAAE,OAAO,EAAE,EACX,EAAE,aAAa,EAAE,oFAAkB,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAC5D,CAAC;IACN,CAAC;IAED,WAAW,CAAC,QAAkF,EAAE,EAChG,iBAA2B;QACvB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,UAAU,CAAC,gDACjC,KAAK,CAAC,MAAM,IAAI,EAAE,UAAU,EAAE,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE,GAC5E,KAAK,CAAC,MAAM,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,MAAM,EAAE,GACxC,iBAAiB,KAAK,SAAS,IAAI,EAAE,OAAO,EAAE,YAAY,EAAE,EACjE,CAAC;IACP,CAAC;IAED,WAAW,CAAC,QAAgB,EAAE,QAAgB,EAAE,SAAiB,EAAE,MAAkB;QACjF,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,CAAC,EAAE,EAAE,MAAM,EAAE,EACnE,EAAE,aAAa,EAAE,oFAAkB,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAC5D,CAAC;IACN,CAAC;;oEAtFQ,UAAU;6FAAV,UAAU,WAAV,UAAU,mBADG,MAAM;;;;;;;;;;;;;ACjBhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4D;AACJ;AACE;AACa;AACZ;AACS;AACV;AACM;AACR;AACc;AACiB;AACG;AACnB;AACa;AACe;AACpB;AAC0B;AACA;AACvC;AACW;AACJ;AACkE;;;;AAoCpI,MAAM,SAAS;;yFAAT,SAAS,cAFN,qEAAa;6IAEhB,SAAS,kBAXT;YACL,2DAAW;YACX,uEAAa;YACb,wEAAc;YACd,6EAAgB;YAChB,qEAAgB;YAChB,mEAAmB;YACnB,6FAAuB;SAC1B;oIAGQ,SAAS,mBAhCd,yEAAW;QACX,qEAAa;QACb,oFAAa;QACb,uEAAe;QACf,iFAAe;QACf,uEAAe;QACf,mFAAgB;QAChB,oEAAgB;QAChB,qGAAiB;QACjB,qEAAiB;QACjB,yEAAiB;QACjB,wGAAkB;QAClB,qFAAoB;QACpB,kGAAoB;QACpB,iHAAoB;QACpB,uHAAuB;QACvB,sHAAwB;QACxB,oFAA4B;QAC5B,qFAA6B;QAC7B,2FAAmC,aAGnC,2DAAW;QACX,uEAAa;QACb,wEAAc;QACd,6EAAgB;QAChB,qEAAgB;QAChB,mEAAmB;QACnB,6FAAuB;mEAvBvB,uEAAe,8NAFf,uEAAe;;;;;;;;;;;;;AC7BvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6C;AAE2B;AACR;;;;;;;;;;ICD5D,oEAAuB;IAAA,uDAAiB;IAAA,4DAAI;;;IAArB,0DAAiB;IAAjB,mFAAiB;;;IAM5B,4EAA4C;IACxC,uEAAM;IAAA,uDAAqB;IAAA,4DAAO;IACtC,4DAAY;;;;IADF,0DAAqB;IAArB,0FAAqB;;;IAJnC,iFAAwC;IACpC,4EAAW;IAAA,uDAAiB;IAAA,4DAAY;IACxC,sEAA+E;IAC/E,uJAEY;IAChB,4DAAiB;;;;IALF,0DAAiB;IAAjB,+EAAiB;IACZ,0DAA4B;IAA5B,+FAA4B;IAChC,0DAA8B;IAA9B,6FAA8B;;;IAO1C,4EAA4C;IACxC,uEAAM;IAAA,uDAAqB;IAAA,4DAAO;IACtC,4DAAY;;;;IADF,0DAAqB;IAArB,0FAAqB;;;IAJnC,iFAA4C;IACxC,4EAAW;IAAA,uDAAiB;IAAA,4DAAY;IACxC,0EAAgE;IAChE,uJAEY;IAChB,4DAAiB;;;IALF,0DAAiB;IAAjB,+EAAiB;IACT,0DAAiC;IAAjC,6FAAiC;IACxC,0DAA8B;IAA9B,6FAA8B;;;IAZtD,sEAAkC;IAC9B,2EAAyC;IACrC,gJAMiB;IACjB,gJAMiB;IACrB,qEAAe;IACnB,4DAAM;;;IAhBY,0DAA0B;IAA1B,sFAA0B;IACnB,0DAAqB;IAArB,iFAAqB;IAOrB,0DAAyB;IAAzB,qFAAyB;;ADiB/C,MAAM,wBAAwB;IALrC;QAMI,UAAK,GAAG,OAAO,CAAC;QAChB,YAAO,GAAG,KAAK,CAAC;QAEhB,WAAM,GAAG,IAAI,0DAAY,EAAE,CAAC;QAC5B,qBAAgB,GAAG,QAAQ,CAAC;QAC5B,qBAAgB,GAAG,QAAQ,CAAC;QAC5B,gBAAW,GAAG,cAAc,CAAC;KAuChC;IApCG,QAAQ;QACJ,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,IAAI,IAAI,CAAC,SAAS,KAAK,IAAI;YAAE,MAAM,IAAI,KAAK,CAAC,0CAA0C,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QAC1I,IAAI,IAAI,CAAC,MAAM,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI;YAAE,MAAM,IAAI,KAAK,CAAC,uCAAuC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAC9H,IAAI,IAAI,CAAC,KAAK,KAAK,OAAO;YAAE,OAAO,CAAC,IAAI,CAAC,+CAA+C,CAAC,CAAC;QAC1F,IAAI,IAAI,CAAC,WAAW,KAAK,cAAc;YAAE,OAAO,CAAC,IAAI,CAAC,qDAAqD,CAAC,CAAC;QAC7G,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,CAAC,IAAI,CAAC,+CAA+C,CAAC,CAAC;;YACvF,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,MAAM,EAAE;gBAClC,IAAI,KAAK,CAAC,WAAW,KAAK,SAAS,IAAI,KAAK,CAAC,WAAW,KAAK,IAAI;oBAAE,KAAK,CAAC,WAAW,GAAG,IAAI,0DAAW,EAAE,CAAC;gBACzG,QAAQ,KAAK,CAAC,OAAO,EAAE;oBACnB,KAAK,OAAO;wBACR,IAAI,CAAC,KAAK,CAAC,IAAI;4BAAE,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC;wBACrC,MAAM;iBACb;aACJ;IACL,CAAC;IAED,OAAO;QACH,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,MAAM;YAC3B,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,IAAI,KAAK,CAAC,WAAW,CAAC,MAAM,KAAK,IAAI;gBAAE,OAAO,KAAK,CAAC;QACpF,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,QAAQ,CAAC,KAAuB;QAC5B,MAAM,OAAO,GAAG,KAAK,CAAC,WAAW,CAAC;QAClC,IAAI,OAAO,CAAC,MAAM,KAAK,IAAI;YACvB,MAAM,IAAI,KAAK,CAAC,8DAA8D,KAAK,CAAC,IAAI,iBAAiB,CAAC,CAAC;QAC/G,OAAO,6FAAc,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC1C,CAAC;IAED,WAAW;QACP,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;IAC3B,CAAC;IAED,OAAO,CAAC,KAAuB;QAC3B,OAAO,KAAc,CAAC;IAC1B,CAAC;;gGA7CQ,wBAAwB;wGAAxB,wBAAwB;QC7BrC,wEAAqB;QAAA,uDAAW;QAAA,4DAAK;QACrC,yEAAwB;QACpB,gHAA4C;QAC5C,oHAiBM;QACV,4DAAM;QACN,yEAAwC;QACpC,4EAAgF;QAAxB,gJAAS,iBAAa,IAAC;QAAC,uDAAsB;QAAA,4DAAS;QAC/G,kFAAmF;QAAzB,wJAAU,iBAAa,IAAC;QAAC,uDAAsB;QAAA,4DAAe;QAC5H,4DAAM;;QAzBe,0DAAW;QAAX,0EAAW;QAExB,0DAAiB;QAAjB,iFAAiB;QACE,0DAAS;QAAT,+EAAS;QAoBG,0DAAoB;QAApB,iFAAoB;QAAyB,0DAAsB;QAAtB,qFAAsB;QACxF,0DAAuB;QAAvB,oFAAuB;QAA8C,0DAAsB;QAAtB,qFAAsB;;;;;;;;;;;;;;ACxB7G;AAAA;AAAA;AAAA;AAAyD;;;;;;;;;;;;;;;;;;;;;;ICEjD,kFAA+B;IAC3B,qEAAI;IAAA,uDAAW;IAAA,4DAAK;IACxB,4DAAkB;;;IADV,0DAAW;IAAX,6EAAW;;;ACIpB,MAAM,uBAAuB;IAIlC,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;8FAPU,uBAAuB;uGAAvB,uBAAuB;;QDPpC,yEAAiC;QAC7B,8EAAkC;QAC9B,2IAEkB;QAClB,mFAAkB;QACd,6DAAyB;QAC7B,4DAAmB;QACvB,4DAAW;QACf,4DAAM;;QAPoB,0DAAW;QAAX,2EAAW;;;;;;;;;;;;;;AEFrC;AAAA,0DAA0D;;;;;;;;;;;;;;ACA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2B;AACD;;;;;;;;;;;;;ACD1B;AAAA,0DAA0D;;;;;;;;;;;;;;;;;;;;;ACOnD,MAAM,iBAAiB;IAE1B,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;kFALQ,iBAAiB;iGAAjB,iBAAiB;;QCP9B,8EAA4B;QACxB,6DAAyB;QAC7B,4DAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACD8C;AAE4C;;;;;;;;;;;;;ICGzF,4EAAqD;IACjD,uFACJ;IAAA,4DAAY;;;IAKZ,4EAAqD;IACjD,uFACJ;IAAA,4DAAY;;;IAGpB,gFAAsD;IAAA,uDAAkB;IAAA,4DAAY;;;IAA9B,0DAAkB;IAAlB,oFAAkB;;ADPrE,MAAM,oBAAoB;IAQ7B,YAAoB,OAA2B,EAC3B,mBAA8B,EAC9B,MAA0C;QAF1C,YAAO,GAAP,OAAO,CAAoB;QAC3B,wBAAmB,GAAnB,mBAAmB,CAAW;QAC9B,WAAM,GAAN,MAAM,CAAoC;QAP9D,iBAAY,GAAG,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC1D,iBAAY,GAAG,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;IAMQ,CAAC;IAEnE,eAAe;QACX,UAAU,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;IACzE,CAAC;IAED,kBAAkB,CAAC,KAAoB;QACnC,IAAI,KAAK,CAAC,GAAG,KAAK,OAAO;YAAE,OAAO;QAClC,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK;YAAE,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;IACjF,CAAC;IAED,kBAAkB,CAAC,KAAoB;QACnC,IAAI,KAAK,CAAC,GAAG,KAAK,OAAO;YAAE,OAAO;QAClC,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK;YAAE,IAAI,CAAC,YAAY,EAAE,CAAC;IAChF,CAAC;IAEK,YAAY;;YACd,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YACzB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;YAC5B,IAAI;gBACA,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBACzF,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;gBAC7B,IAAI,KAAK;oBAAE,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;;oBAC1B,IAAI,CAAC,YAAY,GAAG,iCAAiC,CAAC;aAC9D;YAAC,OAAO,KAAK,EAAE;gBACZ,IAAI,KAAK,CAAC,OAAO,KAAK,cAAc,EAAE;oBAClC,IAAI,CAAC,YAAY,GAAG,oCAAoC,CAAC;oBACzD,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;iBAChC;aACJ;QACL,CAAC;KAAA;IAED,gBAAgB;QACZ,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QACpB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,kHAA4B,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE,CAAC,CAAC;IAC1F,CAAC;;wFA7CQ,oBAAoB;oGAApB,oBAAoB;;;;;;;;QCXjC,wEAAqB;QAAA,iEAAM;QAAA,4DAAK;QAChC,yEAAwB;QACpB,0EAAyB;QACrB,iFAAgB;QACZ,4EAAW;QAAA,mEAAQ;QAAA,4DAAY;QAC/B,8EAA2G;QAAxC,uJAAY,8BAA0B,IAAC;QAA1G,4DAA2G;QAC3G,4HAEY;QAChB,4DAAiB;QACjB,kFAAgB;QACZ,6EAAW;QAAA,oEAAQ;QAAA,4DAAY;QAC/B,+EAA2H;QAAxC,wJAAY,8BAA0B,IAAC;QAA1H,4DAA2H;QAC3H,8HAEY;QAChB,4DAAiB;QACrB,4DAAO;QACP,8HAAoF;QACpF,mFAI+B;QAHvB,mJAAS,kBAAc,IAAC;QAI5B,qEACJ;QAAA,4DAAe;QACf,8EAAsG;QAA7B,6IAAS,sBAAkB,IAAC;QAAC,mGAAuC;QAAA,4DAAS;QAC1J,4DAAM;;QAtB4C,0DAA4B;QAA5B,yFAA4B;QACtD,0DAAuC;QAAvC,uGAAuC;QAMG,0DAA4B;QAA5B,yFAA4B;QACtE,0DAAuC;QAAvC,uGAAuC;QAK/C,0DAAkB;QAAlB,kFAAkB;QAGtB,0DAAwD;QAAxD,yHAAwD;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBvB;AAEM;AAEa;;;;;;;;AASzD,MAAM,iBAAiB;IAG1B,YAAoB,KAAY,EACZ,MAAc,EACd,MAAqB,EACrB,OAA2B;QAH3B,UAAK,GAAL,KAAK,CAAO;QACZ,WAAM,GAAN,MAAM,CAAQ;QACd,WAAM,GAAN,MAAM,CAAe;QACrB,YAAO,GAAP,OAAO,CAAoB;IAAI,CAAC;IAEpD,QAAQ;QACJ,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,IAAI;YAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3D,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;QACrC,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAClG,CAAC;IAED,WAAW;QACP,IAAI,CAAC,oBAAoB,CAAC,WAAW,EAAE,CAAC;IAC5C,CAAC;IAED,kBAAkB,CAAC,KAAuB;QACtC,IAAI,KAAK,KAAK,SAAS;YAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACxD,CAAC;IAED,cAAc;QACV,MAAM,eAAe,GAAG,IAAI,0DAAW,EAAE,CAAC;QAC1C,MAAM,aAAa,GAAG,IAAI,0DAAW,CAAC,IAAI,EAAE,qFAAkB,CAAC,eAAe,CAAC,CAAC,CAAC;QACjF,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;YAC1B,KAAK,EAAE,iBAAiB;YACxB,UAAU,EAAE,QAAQ;YACpB,WAAW,EAAE,2DAA2D;YACxE,MAAM,EAAE;gBACJ,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,UAAU,EAAS,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE,eAAe,EAAE;gBAChH,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAI,KAAK,EAAE,iBAAiB,EAAE,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE,aAAa,EAAE;aACjH;YACD,QAAQ,EAAE,CAAM,MAAM,EAAC,EAAE,CAAC;gBACtB,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;gBACtB,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,eAAe,CAAC,KAAK,EAAE,CAAC,CAAC;gBACpF,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC;gBACvB,IAAI,aAAa,CAAC,EAAE,KAAK,IAAI,EAAE;oBAC3B,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;oBACpD,MAAM,CAAC,WAAW,EAAE,CAAC;iBACxB;YACL,CAAC;SACJ,CAAC,CAAC;IACP,CAAC;IAED,oBAAoB;QAChB,kEAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IAChD,CAAC;IAED,cAAc;QACV,IAAI,CAAC,MAAM,CAAC,wBAAwB,EAAE,CAAC;IAC3C,CAAC;IAED,aAAa;QACT,IAAI,CAAC,MAAM,CAAC,uBAAuB,EAAE,CAAC;IAC1C,CAAC;;kFAvDQ,iBAAiB;iGAAjB,iBAAiB;QCf9B,kFAAiB;QACb,qEAAI;QAAA,mEAAQ;QAAA,4DAAK;QACjB,gEAAI;QACJ,yEAAsB;QAClB,yEAA8B;QAC1B,qEAAI;QAAA,0EAAe;QAAA,4DAAK;QACxB,kFAAyC;QAA3B,+IAAS,oBAAgB,IAAC;QAAC,iEAAM;QAAA,4DAAe;QAClE,4DAAM;QACN,0EAA8B;QAC1B,sEAAI;QAAA,8EAAkB;QAAA,4DAAK;QAC3B,mFAA+C;QAAjC,gJAAS,0BAAsB,IAAC;QAAC,kEAAM;QAAA,4DAAe;QACxE,4DAAM;QACN,0EAA8B;QAC1B,sEAAI;QAAA,2EAAe;QAAA,4DAAK;QACxB,mFAAyC;QAA3B,gJAAS,oBAAgB,IAAC;QAAC,kEAAM;QAAA,4DAAe;QAClE,4DAAM;QACN,0EAA8B;QAC1B,sEAAI;QAAA,0EAAc;QAAA,4DAAK;QACvB,6EAAiE;QAA1B,0IAAS,mBAAe,IAAC;QAAC,kEAAM;QAAA,4DAAS;QACpF,4DAAM;QACV,4DAAM;QACV,4DAAkB;;;;;;;;;;;;;;ACrBlB;AAAA;AAAA;AAAA;AAAuD;;;;;;;;;;;;;;;;;;;ACchD,MAAM,eAAe;IAKxB,YAAoB,KAAkB;QAAlB,UAAK,GAAL,KAAK,CAAa;QAJ9B,kBAAa,GAAG,CAAC,CAAC;QAClB,qBAAgB,GAAG,CAAC,CAAC;QACrB,kBAAa,GAAmB,EAAE,CAAC;IAED,CAAC;IAEpC,IAAI,CAAC,OAAe,EAAE,MAAe,EAAE,QAAiB;QAC3D,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC;QACvD,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IAEO,YAAY,CAAC,KAAoB;QACrC,QAAQ,KAAK,EAAE;YACX,KAAK,KAAK;gBACN,IAAI,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE;oBAC5C,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC;oBACvC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,MAAM,EAAE,EAAE,QAAQ,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;oBAC3E,IAAI,CAAC,aAAa,EAAE,CAAC;oBAErB,IAAI,KAAK,CAAC,QAAQ,EAAE;wBAChB,UAAU,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;qBACpE;iBACJ;gBACD,MAAM;YACV,KAAK,WAAW;gBACZ,IAAI,CAAC,aAAa,EAAE,CAAC;SAC5B;IACL,CAAC;;8EA5BQ,eAAe;kGAAf,eAAe,WAAf,eAAe,mBAFZ,MAAM;;;;;;;;;;;;;ACZtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuE;;;;;;ICCnE,4EAAyE;;IAA9B,wEAAe;;;IAEtD,kFAAkC;;;ADInC,MAAM,eAAe;IAL5B;QAOa,YAAO,GAAG,KAAK,CAAC;QAEf,WAAM,GAAG,IAAI,0DAAY,EAAE,CAAC;QAC7B,UAAK,GAAuB,SAAS,CAAC;KAOlD;IALG,OAAO;QACH,IAAI,IAAI,CAAC,QAAQ;YAAE,OAAO;QAC1B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACrC,CAAC;;8EAVQ,eAAe;+FAAf,eAAe;;QCP5B,4EAA8G;QAApB,uIAAS,aAAS,IAAC;QACzG,2HAAyE;QACzE,uMAEc;QAClB,4DAAS;;;QALgC,4EAAe;QACtC,0DAAe;QAAf,6EAAe;;;;;;;;;;;;;;ACDjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+E;;;;;;AASxE,MAAM,oBAAoB;IALjC;QAOa,UAAK,GAAG,KAAK,CAAC;QACd,aAAQ,GAAG,KAAK,CAAC;QAChB,SAAI,GAAG,IAAI,0DAAY,EAAkB,CAAC;QAC1C,YAAO,GAAG,IAAI,0DAAY,EAAkB,CAAC;KAK1D;IAHG,QAAQ;QACJ,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI;YAAE,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;IACtH,CAAC;;wFATQ,oBAAoB;oGAApB,oBAAoB;QCTjC,yEAA6E;QACzE,8EAA8D;QAApD,8IAAS,uBAAoB,IAAC;QAAsB,4EAAiB;QAAA,4DAAW;QAC1F,uEAAwB;QAAA,uDAA+B;;QAAA,4DAAI;QAC/D,4DAAM;QACN,yEAAgF;QAC5E,8EAAiE;QAAvD,8IAAS,0BAAuB,IAAC;QAAsB,8EAAmB;QAAA,4DAAW;QAC/F,uEAA2B;QAAA,wDAAkC;;QAAA,4DAAI;QACrE,4DAAM;;QAPW,qLAA2D;QAErE,0DAAoB;QAApB,iFAAoB;QAAC,0DAA+B;QAA/B,gJAA+B;QAE1C,0DAA8D;QAA9D,wLAA8D;QAExE,0DAAuB;QAAvB,oFAAuB;QAAC,0DAAkC;QAAlC,oJAAkC;;;;;;;;;;;;;;ACNjE;AAAA;AAAA;AAAA;AAAA,wCAA6B;AACF;AACC;;;;;;;;;;;;;ACD5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuE;AACQ;AACxB;AACgB;AACN;;;AAEjE,MAAM,MAAM,GAAW;IACnB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,oFAAoB,EAAE;IAC7C,EAAE,IAAI,EAAE,gBAAgB,EAAE,SAAS,EAAE,0DAAgB,EAAE;IACvD,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,oFAAa,EAAE;IAC9C,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,2DAAiB,EAAE;IAClD,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,2FAAiB,EAAE;CAC/C,CAAC;AAMK,MAAM,gBAAgB;;+FAAhB,gBAAgB;0JAAhB,gBAAgB,kBAHhB,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,sBAAsB,EAAE,QAAQ,EAAE,CAAC,CAAC,EACnE,4DAAY;mIAEb,gBAAgB,uFAFf,4DAAY;;;;;;;;;;;;;AChB1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuD;AACA;AACA;AACE;AACE;AACA;AACE;AACA;AACG;AACE;AACY;;AAiBvE,MAAM,cAAc;;8FAAd,cAAc;uJAAd,cAAc,kBAbnB,oEAAa;QACb,oEAAa;QACb,oEAAa;QACb,sEAAc;QACd,wEAAe;QACf,wEAAe;QACf,0EAAgB;QAChB,0EAAgB;QAChB,6EAAiB;QACjB,+EAAkB;QAClB,4FAAwB;oIAGnB,cAAc,cAbnB,oEAAa;QACb,oEAAa;QACb,oEAAa;QACb,sEAAc;QACd,wEAAe;QACf,wEAAe;QACf,0EAAgB;QAChB,0EAAgB;QAChB,6EAAiB;QACjB,+EAAkB;QAClB,4FAAwB;;;;;;;;;;;;;ACzBhC;AAAA;AAAA;AAAA;AAAqD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACEF;;;;;;;;;;;;;;ICEnC,yEAA0D;IACtD,wFAKoC;IAFhC,4WAAyB;IAG7B,4DAAqB;IACrB,sEAAK;IACD,uEAAyE;IAAA,uDAAgB;IAAA,4DAAI;IAC7F,yEAA0B;IACtB,oEAAG;IACC,2EAAkC;IAAA,uDAAuC;;IAAA,4DAAO;IAAC,gEACjF;IAAA,4EAEqF;IAC7E,wDACR;IAAA,4DAAO;IACX,4DAAI;IACR,4DAAM;IACN,yEAA0B;IACtB,wDACJ;IAAA,4DAAI;IACR,4DAAM;IACV,4DAAM;;;;IAtBE,0DAAa;IAAb,yEAAa;IAOyB,0DAAkC;IAAlC,8FAAkC;IAAC,0DAAgB;IAAhB,8EAAgB;IAG3E,0DAA2B;IAA3B,8FAA2B;IAAC,0DAAuC;IAAvC,sKAAuC;IAGrE,0DAA8C;IAA9C,0GAA8C;IAC1C,0DACR;IADQ,qGACR;IAIJ,0DACJ;IADI,gKACJ;;;IAvBZ,wEAAmC;IAC/B,gJAwBM;IACV,qEAAe;;;IAzBW,0DAAQ;IAAR,iFAAQ;;;;IA0BlC,wEAAqC;IACjC,oEAAG;IAAA,qEACC;IAAA,2EAAsE;IAAhE,2TAAS,qCAA6B,IAAC;IAAyB,4EAAiB;IAAA,4DAAO;IAClG,4DAAI;IACR,qEAAe;;;;IACf,wEAAsC;IAClC,oEAAG;IAAA,gGAAqC;IAAA,4DAAI;IAC5C,wEAA0B;IAAvB,gVAAsB;IAAC,gEAAK;IAAA,4DAAI;IACvC,qEAAe;;;IArCvB,wEAAkD;IAC9C,2EAAsC;IAClC,iJA0Be;IACf,iJAIe;IACf,iJAGe;IACnB,qEAAe;IACnB,qEAAe;;;IAtCG,0DAAuB;IAAvB,uFAAuB;IAClB,0DAAkB;IAAlB,8EAAkB;IA2BlB,0DAAoB;IAApB,gFAAoB;IAKpB,0DAAqB;IAArB,iFAAqB;;;IAOxC,6EAAwD;;ADzBzD,MAAM,oBAAoB;IAK7B,YAAoB,KAAY,EACZ,IAAiB,EAClB,MAAqB,EACpB,OAA2B;QAH3B,UAAK,GAAL,KAAK,CAAO;QACZ,SAAI,GAAJ,IAAI,CAAa;QAClB,WAAM,GAAN,MAAM,CAAe;QACpB,YAAO,GAAP,OAAO,CAAoB;QAL/C,eAAU,GAA4B,MAAM,CAAC;IAKM,CAAC;IAEpD,QAAQ;QACJ,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAChC,IAAI,CAAC,UAAU,EAAE,CAAC;IACtB,CAAC;IAEK,UAAU;;YACZ,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YACzB,IAAI;gBACA,IAAI,CAAC,KAAK,IAAG,MAAM,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAQ,EAAC;gBACtE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC;aACvD;YAAC,OAAO,KAAK,EAAE;gBACZ,IAAI,KAAK,CAAC,OAAO,KAAK,cAAc,EAAE;oBAClC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;iBACnB;gBACD,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC;aAC7B;YACD,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC9B,CAAC;KAAA;IAED,WAAW,CAAC,MAAc;QACtB,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC;YAAE,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;;YAC/E,OAAO,KAAK,CAAC;IACtB,CAAC;IAED,cAAc,CAAC,MAAc;QACzB,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC;YAAE,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;;YAChF,OAAO,KAAK,CAAC;IACtB,CAAC;IAED,WAAW,CAAC,IAAU;QAClB,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,cAAc,EAAE,CAAC;IACvD,CAAC;IAEK,QAAQ,CAAC,IAAoB;;YAC/B,IAAI,GAAG,IAAY,CAAC;YACpB,IAAI,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI;gBAAE,MAAM,IAAI,KAAK,CAAC,kDAAkD,GAAG,IAAI,CAAC,CAAC;YACpH,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,IAAI,EAAE;gBAChD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBAC7D,IAAI,WAAW,CAAC,EAAE,KAAK,IAAI,EAAE;oBACzB,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBACzC,IAAI,CAAC,KAAK,EAAE,CAAC;iBAChB;;oBAAM,MAAM,IAAI,KAAK,CAAC,wCAAwC,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;aACxF;iBAAM;gBACH,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBAC7D,IAAI,WAAW,CAAC,EAAE,KAAK,IAAI,EAAE;oBACzB,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,KAAK;wBAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;oBACrE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;oBAC5C,IAAI,CAAC,KAAK,EAAE,CAAC;iBAChB;;oBAAM,MAAM,IAAI,KAAK,CAAC,wCAAwC,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;aACxF;QACL,CAAC;KAAA;IAEK,WAAW,CAAC,IAAoB;;YAClC,IAAI,GAAG,IAAY,CAAC;YACpB,IAAI,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI;gBAAE,MAAM,IAAI,KAAK,CAAC,kDAAkD,GAAG,IAAI,CAAC,CAAC;YACpH,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,KAAK,EAAE;gBACjD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBAC7D,IAAI,WAAW,CAAC,EAAE,KAAK,IAAI,EAAE;oBACzB,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBACzC,IAAI,CAAC,QAAQ,EAAE,CAAC;iBACnB;;oBAAM,MAAM,IAAI,KAAK,CAAC,wCAAwC,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;aACxF;iBAAM;gBACH,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC9D,IAAI,WAAW,CAAC,EAAE,KAAK,IAAI,EAAE;oBACzB,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,IAAI;wBAAE,IAAI,CAAC,KAAK,EAAE,CAAC;oBACjE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;oBAC7C,IAAI,CAAC,QAAQ,EAAE,CAAC;iBACnB;;oBAAM,MAAM,IAAI,KAAK,CAAC,wCAAwC,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;aACxF;QACL,CAAC;KAAA;;wFA/EQ,oBAAoB;oGAApB,oBAAoB;QCjBjC,8EAAyC;QACrC,kIAuCe;QACf,4MAEc;QAClB,4DAAW;;;QA3CQ,0DAAqB;QAArB,mFAAqB;;;;;;;;;;;;;;ACDxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsD;AACiB;AACE;AACa;;;;;;;;;;;;;ACHtF;AAAA,0DAA0D;;;;;;;;;;;;;;ACA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyB;AACG;AACH;;;;;;;;;;;;;ACFzB;AAAA;AAAA;AAAA;AAAgG;;;;;;;;;;;;;;;;;;;ACAjD;AAGF;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;;;;;;;ACXpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,qC","file":"main.js","sourcesContent":["export { ViewCardComponent } from './view-card.component';\r\n","import { FormControl } from '@angular/forms';\r\nimport { DialogService } from 'spiff/app/services/dialog.service';\r\nimport { valueMustNotBe } from 'spiff/app/forms/validators';\r\nimport { UserAccountService } from 'spiff/app/services/user-account.service';\r\n\r\nexport default function changeScreenname(dialogService: DialogService, accountService: UserAccountService): void {\r\n    const screennameControl = new FormControl(\r\n        accountService.user.screenname,\r\n        valueMustNotBe(accountService.user.screenname)\r\n    );\r\n    dialogService.openGenericDialog({\r\n        title: 'Change Screen Name',\r\n        submitText: 'Change',\r\n        description: 'Please enter what you would like your new screen name to be.',\r\n        fields: [\r\n            {\r\n                element: 'input',\r\n                name: 'screenname',\r\n                label: 'Screen Name',\r\n                formControl: screennameControl\r\n            }\r\n        ],\r\n        onSubmit: async dialog => {\r\n            dialog.loading = true;\r\n            const updateRequest = await accountService.patch({ screenname: screennameControl.value });\r\n            dialog.loading = false;\r\n            if (updateRequest.ok === true) {\r\n                accountService.passwordChanged(screennameControl.value);\r\n                dialog.closeDialog();\r\n            }\r\n        }\r\n    });\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl }       from '@angular/forms';\r\nimport { Title }             from '@angular/platform-browser';\r\nimport { ActivatedRoute }    from '@angular/router';\r\nimport { ApiService }                from 'api/services/api.service';\r\nimport { Comment, Post, User }       from 'interface/data-types';\r\nimport { GetPostError, PostService } from 'services/post.service';\r\nimport { SnackbarService }           from 'services/snackbar.service';\r\nimport { UserAccountService }        from 'services/user-account.service';\r\n\r\ninterface PostUserIncluded extends Post {\r\n    author: User;\r\n}\r\n\r\ninterface CommentUserIncluded extends Comment {\r\n    author: User;\r\n}\r\n\r\n@Component({\r\n    selector: 'spiff-post',\r\n    templateUrl: './post.component.html',\r\n    styleUrls: ['./post.component.scss']\r\n})\r\nexport class PostComponent implements OnInit {\r\n    readonly services: {\r\n        readonly account: UserAccountService;\r\n        readonly api: ApiService;\r\n        readonly post: PostService;\r\n        readonly route: ActivatedRoute;\r\n        readonly snackbar: SnackbarService;\r\n        readonly title: Title;\r\n    }\r\n\r\n    readonly state = {\r\n        liked: false,\r\n        disliked: false,\r\n        postLoading: true,\r\n        commentsLoading: true,\r\n        commentsError: false\r\n    };\r\n    post: PostUserIncluded;\r\n\r\n    canDisplay = false;\r\n    errorMessage: string;\r\n    commentControl = new FormControl();\r\n    postingComment = false;\r\n    comments: CommentUserIncluded[];\r\n    commentsAmount: number;\r\n\r\n    constructor(title: Title, route: ActivatedRoute, post: PostService, account: UserAccountService,\r\n    snackbar: SnackbarService, api: ApiService) {\r\n        this.services = { account, api, post, route, snackbar, title };\r\n    }\r\n\r\n    updateRatings(): void {\r\n        if (this.services.account.ratedPosts.has(this.post._id)) {\r\n            const rating = this.services.account.ratedPosts.get(this.post._id);\r\n            this.state.liked = rating;\r\n            this.state.disliked = !rating;\r\n        } else {\r\n            this.state.liked = false;\r\n            this.state.disliked = false;\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.services.route.params.subscribe(async params => {\r\n            try {\r\n                this.post = await this.services.post.getPostById(params.id, true) as PostUserIncluded;\r\n                this.services.title.setTitle(this.post.title);\r\n                if (!this.services.account.user) {\r\n                    this.services.account.events.subscribe((event: boolean) => {\r\n                        if (event === true) this.updateRatings();\r\n                    });\r\n                } else this.updateRatings();\r\n                if (this.post.comments.length) {\r\n                    const commentsRequest = await this.services.api.getComments(\r\n                        { parent: { type: 'post', id: this.post._id } }, true\r\n                    );\r\n                    if (commentsRequest.ok) {\r\n                        this.comments = commentsRequest.comments as CommentUserIncluded[];\r\n                        this.commentsAmount = this.comments.length;\r\n                    } else {\r\n                        this.state.commentsError = true;\r\n                        this.services.snackbar.push('An error occurred while retrieving the comments.');\r\n                        console.error(commentsRequest);\r\n                    }\r\n                    this.state.commentsLoading = false;\r\n                } else {\r\n                    this.comments = [];\r\n                    this.state.commentsLoading = false;\r\n                }\r\n            } catch (error) {\r\n                if (error instanceof GetPostError) {\r\n                    this.errorMessage = error.error;\r\n                } else throw error;\r\n            }\r\n            this.state.postLoading = false;\r\n            this.canDisplay = !!this.post;\r\n        });\r\n    }\r\n\r\n    async likePost(): Promise<void> {\r\n        if (!this.services.account.user) {\r\n            this.services.snackbar.push('Sorry, you must be logged in to do that.', 'OK', 5000);\r\n            return;\r\n        }\r\n        if (this.state.liked) {\r\n            const rateRequest = await this.services.account.ratePost(this.post._id, 0);\r\n            if (rateRequest.ok === true) {\r\n                this.services.account.ratedPosts.delete(this.post._id);\r\n                this.state.liked = false;\r\n                this.post.likes--;\r\n            } else throw new Error('Error while liking post in Post View: ' + rateRequest.error);\r\n        } else {\r\n            const rateRequest = await this.services.account.ratePost(this.post._id, 1);\r\n            if (rateRequest.ok === true) {\r\n                this.services.account.ratedPosts.set(this.post._id, true);\r\n                this.state.liked = true;\r\n                this.post.likes++;\r\n                if (this.state.disliked) {\r\n                    this.state.disliked = false;\r\n                    this.post.dislikes--;\r\n                }\r\n            } else throw new Error('Error while liking post in Post View: ' + rateRequest.error);\r\n        }\r\n    }\r\n\r\n    async dislikePost(): Promise<void> {\r\n        if (!this.services.account.user) {\r\n            this.services.snackbar.push('Sorry, you must be logged in to do that.', 'OK', 5000);\r\n            return;\r\n        }\r\n        if (this.state.disliked) {\r\n            const rateRequest = await this.services.account.ratePost(this.post._id, 0);\r\n            if (rateRequest.ok === true) {\r\n                this.services.account.ratedPosts.delete(this.post._id);\r\n                this.state.disliked = false;\r\n                this.post.dislikes--;\r\n            } else throw new Error('Error while liking post in Post View: ' + rateRequest.error);\r\n        } else {\r\n            const rateRequest = await this.services.account.ratePost(this.post._id, -1);\r\n            if (rateRequest.ok === true) {\r\n                this.services.account.ratedPosts.set(this.post._id, false);\r\n                this.state.disliked = true;\r\n                this.post.dislikes++;\r\n                if (this.state.liked) {\r\n                    this.state.liked = false;\r\n                    this.post.likes--;\r\n                }\r\n            } else throw new Error('Error while liking post in Post View: ' + rateRequest.error);\r\n        }\r\n    }\r\n\r\n    async likeComment(comment: CommentUserIncluded): Promise<void> {\r\n        if (!this.services.account.user) {\r\n            this.services.snackbar.push('Sorry, you must be logged in to do that.', 'OK', 5000);\r\n            return;\r\n        }\r\n        const isUnrated = !this.services.account.ratedComments.has(comment._id);\r\n        const isDisliked = this.services.account.ratedComments.get(comment._id) === false;\r\n        if (isUnrated || isDisliked) {\r\n            const likeRes = await this.services.account.rateComment(comment._id, 1);\r\n            if (likeRes.ok) {\r\n                if (this.services.account.ratedComments.get(comment._id) === false)\r\n                    comment.dislikes--;\r\n                this.services.account.ratedComments.set(comment._id, true);\r\n                comment.likes++;\r\n            } else {\r\n                console.error(`Received an error while liking comment \"${comment._id}\"\\n` +\r\n                `${JSON.stringify(likeRes)}`);\r\n                this.services.snackbar.push('An error occurred while liking that comment.');\r\n            }\r\n        } else {\r\n            const unrateRes = await this.services.account.rateComment(comment._id, 0);\r\n            if (unrateRes.ok) {\r\n                this.services.account.ratedComments.delete(comment._id);\r\n                comment.likes--;\r\n            } else {\r\n                console.error(`Received an error while unliking comment \"${comment._id}\"\\n` +\r\n                `${JSON.stringify(unrateRes)}`);\r\n                this.services.snackbar.push('An error occurred while unrating that comment.');\r\n            }\r\n        }\r\n    }\r\n\r\n    async dislikeComment(comment: CommentUserIncluded): Promise<void> {\r\n        if (!this.services.account.user) {\r\n            this.services.snackbar.push('Sorry, you must be logged in to do that.', 'OK', 5000);\r\n            return;\r\n        }\r\n        const isUnrated = !this.services.account.ratedComments.has(comment._id);\r\n        const isLiked = this.services.account.ratedComments.get(comment._id) === true;\r\n        if (isUnrated || isLiked) {\r\n            const dislikeRes = await this.services.account.rateComment(comment._id, -1);\r\n            if (dislikeRes.ok) {\r\n                if (this.services.account.ratedComments.get(comment._id) === true)\r\n                    comment.likes--;\r\n                this.services.account.ratedComments.set(comment._id, false);\r\n                comment.dislikes++;\r\n            } else {\r\n                console.error(`Received an error while disliking comment \"${comment._id}\"\\n` +\r\n                `${JSON.stringify(dislikeRes)}`);\r\n                this.services.snackbar.push('An error occurred while disliking that comment.');\r\n            }\r\n        } else {\r\n            const unrateRes = await this.services.account.rateComment(comment._id, 0);\r\n            if (unrateRes.ok) {\r\n                this.services.account.ratedComments.delete(comment._id);\r\n                comment.dislikes--;\r\n            } else {\r\n                console.error(`Received an error while unrating comment \"${comment._id}\"\\n` +\r\n                    JSON.stringify(unrateRes));\r\n                this.services.snackbar.push('An error occurred while unrating that comment.');\r\n            }\r\n        }\r\n    }\r\n\r\n    isCommentLiked(id: string): boolean {\r\n        if (!this.services.account.user) return false;\r\n        if (!this.services.account.ratedComments.has(id)) return false;\r\n        return this.services.account.ratedComments.get(id);\r\n    }\r\n\r\n    isCommentDisliked(id: string): boolean {\r\n        if (!this.services.account.user) return false;\r\n        if (!this.services.account.ratedComments.has(id)) return false;\r\n        return !this.services.account.ratedComments.get(id);\r\n    }\r\n\r\n    linkToProfile(username: string): string {\r\n        return `/user/${username}`;\r\n    }\r\n\r\n    async postComment(): Promise<void> {\r\n        this.postingComment = true;\r\n        const response = await this.services.account.postComment('post', this.post._id, this.commentControl.value);\r\n        if (response.ok) {\r\n            this.commentControl.reset();\r\n            const commentCopy = { ...response.comment };\r\n            commentCopy.author = this.services.account.user;\r\n            this.commentsAmount = this.comments.push(commentCopy as CommentUserIncluded);\r\n        } else {\r\n            console.error('Received an error while posting comment.\\n' + JSON.stringify(response));\r\n            this.services.snackbar.push('Something went wrong while posting your comment.', 'OK', 5000);\r\n        }\r\n        this.postingComment = false;\r\n    }\r\n\r\n    numToDate(date: number): string {\r\n        return new Date(date * 1000).toUTCString()\r\n    }\r\n\r\n    isAuthor(comment: CommentUserIncluded): boolean {\r\n        return this.services.account?.user._id === comment.author._id;\r\n    }\r\n}\r\n","<div class=\"view-container\">\r\n    <div class=\"post-container section-container\">\r\n        <div *ngIf=\"state.postLoading; else loaded\" class=\"loading-display\">\r\n            <mat-spinner></mat-spinner>\r\n        </div>\r\n        <ng-template #loaded>\r\n            <div class=\"loaded-post-container\" *ngIf=\"post; else cannotDisplay\">\r\n                <div class=\"post\">\r\n                    <spiff-rate-counter [item]=\"post\" [liked]=\"state.liked\" (like)=\"likePost()\"\r\n                        [disliked]=\"state.disliked\" (dislike)=\"dislikePost()\">\r\n                    </spiff-rate-counter>\r\n                    <div class=\"post-contents\">\r\n                        <p class=\"title\">{{ post.title }}</p>\r\n                        <p class=\"submission-info\">Submitted\r\n                            <span [title]=\"numToDate(post.date)\"> {{ post.date | dateAgo }} ago by </span>\r\n                            <span class=\"profile-link\" [routerLink]=\"linkToProfile(post.author.username)\">\r\n                                {{ post.author.username }}</span>\r\n                        </p>\r\n                        <div class=\"post-content\">{{ post.content }}</div>\r\n                    </div>\r\n                </div>\r\n                <p>{{ commentsAmount + ' comment' + (commentsAmount === 1 ? '' : 's')}}</p>\r\n                <textarea class=\"create-comment\" [formControl]=\"commentControl\"\r\n                    placeholder=\"Leave a comment :-)\"></textarea>\r\n                <spiff-button (action)=\"postComment()\" class=\"post-comment-button\" [disabled]=\"!commentControl.value\"\r\n                    [loading]=\"postingComment\">Post</spiff-button>\r\n            </div>\r\n            <ng-template #cannotDisplay>\r\n                <div class=\"not-found\">\r\n                    <h2>Sorry, we couldn't find what you were looking for.</h2>\r\n                    <img src=\"/assets/not-found.png\" class=\"public-image\">\r\n                    <p class=\"error-message\">Error: {{ errorMessage }}</p>\r\n                </div>\r\n            </ng-template>\r\n        </ng-template>\r\n    </div>\r\n    <ng-container *ngIf=\"state.commentsLoading; else commentsLoaded\">\r\n        <mat-spinner [diameter]=\"50\"></mat-spinner>\r\n    </ng-container>\r\n    <ng-template #commentsLoaded>\r\n        <div class=\"comment section-container\" *ngFor=\"let comment of comments\">\r\n            <spiff-rate-counter [item]=\"comment\" (like)=\"likeComment(comment)\"\r\n                (dislike)=\"dislikeComment(comment)\" [liked]=\"isCommentLiked(comment._id)\"\r\n                [disliked]=\"isCommentDisliked(comment._id)\"></spiff-rate-counter>\r\n            <div>\r\n                <div class=\"comment-header\">\r\n                    <a class=\"comment-username\" [routerLink]=\"'/user/' + comment.author.username\">{{ comment.author.username }}</a>\r\n                    <p [title]=\"numToDate(comment.created)\">{{ comment.created | dateAgo }} ago</p>\r\n                </div>\r\n                <p class=\"comment-content\">{{ comment.content }}</p>\r\n                <div class=\"comment-footer\">\r\n                    <p *ngIf=\"isAuthor(comment)\">edit</p>\r\n                    <p>reply</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </ng-template>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { environment as env } from 'spiff/environments/environment';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\n\r\ninterface Headers {\r\n    [header: string]: string;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ApiHttpService {\r\n    private apiUrl = env.apiHost;\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    private createUrl(path: string[], query: object): string {\r\n        Object.keys(query).forEach(key => { if (!query[key]) delete query[key]; });\r\n        let fullPath = this.apiUrl + '/';\r\n        fullPath += path.join('/');\r\n        if (query) {\r\n            const queryKeys = Object.keys(query);\r\n            if (queryKeys.length) {\r\n                const firstKey = queryKeys.shift();\r\n                fullPath += `?${firstKey}=${query[firstKey]}`;\r\n                queryKeys.forEach(key => fullPath += `&${key}=${query[key]}`);\r\n            }\r\n        }\r\n        return fullPath;\r\n    }\r\n\r\n    private async request<T>(\r\n        method: string,\r\n        path: string[],\r\n        query: object,\r\n        body: object,\r\n        headers: Headers\r\n    ): Promise<T> {\r\n        const url = this.createUrl(path, query);\r\n        console.log(`[NET] ${method} ${url}`);\r\n\r\n        try {\r\n            return await this.http.request<T>(method, url, { body, headers }).toPromise();\r\n        } catch (error) {\r\n            if (error instanceof HttpErrorResponse) {\r\n                if (error.error instanceof ProgressEvent) {\r\n                    throw new Error('NoConnection');\r\n                }\r\n                if (error.error.hasOwnProperty('error') && error.error.hasOwnProperty('ok')) {\r\n                    return error.error;\r\n                }\r\n            }\r\n            console.error('[NET] Request Error!');\r\n            console.log(error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async get<T>(path: string[], query: object = {}, headers: Headers = {}): Promise<T> {\r\n        return await this.request<T>('GET', path, query, {}, headers);\r\n    }\r\n\r\n    async post<T>(path: string[], body: object = {}, headers: Headers = {}): Promise<T> {\r\n        return await this.request<T>('POST', path, {}, body, headers);\r\n    }\r\n\r\n    async delete<T>(path: string[], headers: Headers = {}): Promise<T> {\r\n        return await this.request<T>('DELETE', path, {}, {}, headers);\r\n    }\r\n\r\n    async patch<T>(path: string[], body: object, headers: Headers = {}): Promise<T> {\r\n        return await this.request<T>('PATCH', path, {}, body, headers);\r\n    }\r\n\r\n}\r\n","export * from './api-responses';\r\nexport * from './auth-responses';\r\nexport * from './error-responses';\r\n","import { Component, Input, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'spiff-dialog',\r\n    templateUrl: './dialog.component.html',\r\n    styleUrls: ['./dialog.component.scss']\r\n})\r\nexport class DialogComponent implements OnInit {\r\n\r\n    @Input() title = 'Dialog Title';\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n}\r\n","<h1 mat-dialog-title>{{ title }}</h1>\r\n<h3>lol</h3>\r\n<div mat-dialog-actions class=\"spiff-dialog-actions\">\r\n    <button mat-button color=\"primary\">Cancel</button>\r\n    <spiff-button>Change</spiff-button>\r\n</div>","export { ButtonComponent } from './button.component';\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'dateAgo' })\r\nexport class DateAgoPipe implements PipeTransform {\r\n    transform(num: number): string {\r\n        const now = new Date();\r\n        const then = new Date(num * 1000);\r\n        const seconds = Math.round((now.getTime() - then.getTime()) / 1000);\r\n        if (seconds < 60) return `${seconds} ${seconds === 1 ? 'second' : 'seconds'}`;\r\n        const minutes = Math.round(seconds / 60);\r\n        if (minutes < 60) return `${minutes} ${minutes === 1 ? 'minute' : 'minutes'}`;\r\n        const hours = Math.round(minutes / 60);\r\n        if (hours < 24) return `${hours} ${hours === 1 ? 'hour' : 'hours'}`;\r\n        const days = Math.round(hours / 24);\r\n        return `${days} ${days === 1 ? 'day' : 'days'}`;\r\n    }\r\n}\r\n","export { CreateAccountDialogComponent } from './create-account-dialog.component';\r\n","export function errorsToString(errorObj: object): string {\r\n    for (const errorName of Object.keys(errorObj)) {\r\n        switch (errorName) {\r\n            case 'sameValue':\r\n                return 'Does not match.';\r\n            case 'required':\r\n                return 'This field is required.';\r\n            case 'mustNotEqual':\r\n                return `Must not equal ${errorObj[errorName].mustNotEqual}.`;\r\n            default:\r\n                return `Error: ${errorName}`;\r\n        }\r\n    }\r\n}\r\n","<div class=\"container\">\r\n    <mat-card class=\"profile\">\r\n        <h1 class=\"screen-name\">{{ screenname }}</h1>\r\n        <div class=\"user-area\">\r\n            <img src=\"/assets/anon.png\" class=\"profile-picture\">\r\n            <h2 class=\"username\">{{ username }}</h2>\r\n        </div>\r\n        <hr *ngIf=\"loadingPosts || posts.length > 0\">\r\n        <mat-spinner *ngIf=\"loadingPosts; else ngPosts\" class=\"post-spinner\"></mat-spinner>\r\n        <ng-template #ngPosts>\r\n            <button mat-raised-button color=\"primary\" class=\"make-post-button\" *ngIf=\"!posts.length; else tingy\" (click)=\"dialog.openCreatePostDialog()\">Make a Post</button>\r\n            <ng-template #tingy>\r\n            </ng-template>\r\n            <div class=\"post-container\">\r\n                <div class=\"post\" *ngFor=\"let post of posts\" [routerLink]=\"'/post/' + post._id\">\r\n                    <h3 class=\"post-title\">{{ post.title }}</h3>\r\n                    <p class=\"post-content\">{{ post.content }}</p>\r\n                </div>\r\n            </div>\r\n        </ng-template>\r\n    </mat-card>\r\n</div>","import { Post } from 'spiff/app/api/interface/data-types';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ApiService } from 'spiff/app/api/services/api.service';\r\nimport { PostService } from 'spiff/app/services/post.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { DialogService } from 'spiff/app/services/dialog.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'spiff-view-profile',\r\n    templateUrl: './profile.component.html',\r\n    styleUrls: ['./profile.component.scss']\r\n})\r\nexport class ProfileComponent implements OnInit, OnDestroy {\r\n    id: string;\r\n    posts: Post[];\r\n    username: string;\r\n    screenname: string;\r\n    loadingPosts = true;\r\n    postStream: Subscription;\r\n    createdTimestamp: number;\r\n\r\n    constructor(private title: Title,\r\n                private post: PostService,\r\n                public dialog: DialogService,\r\n                private route: ActivatedRoute,\r\n                private api: ApiService) {\r\n        this.postStream = post.postEvents.subscribe(() => this.refreshPosts());\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.postStream.unsubscribe();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.route.params.subscribe(async params => {\r\n            this.username = params.username;\r\n            const userRequest = await this.api.getUsers({ username: this.username });\r\n            if (userRequest.ok === true) {\r\n                const user = userRequest.users[0];\r\n                this.id = user._id;\r\n                this.screenname = user.screenname;\r\n                this.createdTimestamp = user.created;\r\n                this.refreshPosts();\r\n                this.title.setTitle(`user ${this.username}`);\r\n            } else throw new Error(userRequest.error);\r\n        });\r\n    }\r\n\r\n    async refreshPosts(): Promise<void> {\r\n        const posts = await this.getPosts();\r\n        this.posts = posts.sort((a, b) => {\r\n            if (a.date < b.date) {\r\n                return 1;\r\n            } else if (b.date < a.date) {\r\n                return -1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    async getPosts(): Promise<Post[]> {\r\n        this.loadingPosts = true;\r\n        const response = await this.post.getPostsByUserId(this.id);\r\n        this.loadingPosts = false;\r\n        return response;\r\n    }\r\n\r\n}\r\n","export { LandingPageComponent } from './landing-page.component';\r\n","// This file is autogenerated; changes may be overwritten.\n\nimport { User }                        from '../data-types';\r\nimport { IErrorResponse, IOkResponse } from '../response';\r\nimport {\r\n    AuthorizedRequestError,\r\n    IAuthHeaderIdParamMismatchError,\r\n    IAuthorizationParseError,\r\n    INoUserFoundError,\r\n    IObjectIdParseError,\r\n    IUnauthenticatedError,\r\n} from './error-responses';\r\n\r\nexport namespace IRegister {\r\n    export namespace Failed {\r\n        export interface UserExists extends IErrorResponse<'User Already Exists'> { }\r\n        export type Tx = IAuthorizationParseError | IUnauthenticatedError | UserExists;\r\n    }\r\n\r\n    export interface Success extends IOkResponse {\r\n        user: User;\r\n    }\r\n\r\n    export type Tx = Failed.Tx | Success;\r\n}\r\n\r\nexport namespace IAuthorize {\r\n    export type ErrTx = AuthorizedRequestError | IAuthHeaderIdParamMismatchError;\r\n\r\n    export interface Success extends IOkResponse {\r\n        user: User;\r\n    }\r\n\r\n    export type Tx = ErrTx | Success;\r\n}\r\n\r\nexport namespace IDeleteUser {\r\n    export type ErrTx = AuthorizedRequestError | IAuthHeaderIdParamMismatchError | INoUserFoundError | IObjectIdParseError;\r\n\r\n    export interface Success extends IOkResponse { }\r\n\r\n    export type Tx = ErrTx | Success;\r\n}\r\n\r\nexport namespace IPatch {\r\n    export type ErrTx =  IAuthHeaderIdParamMismatchError | AuthorizedRequestError | INoUserFoundError;\r\n\r\n    export interface Success extends IOkResponse {\r\n        updated: string[];\r\n        'rejected-props': string[];\r\n    }\r\n\r\n    export type Tx = ErrTx | Success;\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  apiHost: 'http://localhost:4008'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { Injectable } from '@angular/core';\r\nimport { ComponentType } from '@angular/cdk/portal';\r\nimport { UserAccountService } from 'spiff/app/services/user-account.service';\r\nimport { ActivationEnd, Router } from '@angular/router';\r\nimport { FormControl, Validators } from '@angular/forms';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { AcceptedElements, TextFieldDialogComponent } from 'spiff/app/ui/components/text-field-dialog/text-field-dialog.component';\r\nimport { ChangeUsernameDialogComponent, CreateAccountDialogComponent, DeleteAccountConfirmDialogComponent, LoginDialogComponent } from 'spiff/app/ui/components/dialogs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class DialogService {\r\n    loginDialog: boolean;\r\n    urlSegments: string[];\r\n    registerDialog: boolean;\r\n    viewPostDialog: boolean;\r\n    createPostDialog: boolean;\r\n\r\n    constructor(private dialog: MatDialog, private router: Router, private account: UserAccountService) {\r\n        this.urlSegments = [];\r\n        this.router.events.subscribe(event => {\r\n            if (event instanceof ActivationEnd) {\r\n                this.urlSegments = event.snapshot.url.map(seg => seg.path);\r\n            }\r\n        });\r\n    }\r\n\r\n    private openDialog<T>(className: ComponentType<T>, dialogParam: string, qParams?: object): MatDialogRef<T> {\r\n        const dialogRef = this.dialog.open(className, { width: '80%' });\r\n        return dialogRef;\r\n    }\r\n\r\n    openGenericDialog(config: {\r\n        title?: string;\r\n        cancelText?: string;\r\n        submitText?: string;\r\n        description?: string;\r\n        fields?: AcceptedElements[];\r\n        onSubmit?: (instance: TextFieldDialogComponent) => void;\r\n    } = { title: null, cancelText: null, submitText: null, description: null, fields: [], onSubmit: null }\r\n    ): MatDialogRef<TextFieldDialogComponent> {\r\n        const dialog = this.dialog.open(TextFieldDialogComponent, { width: '80%' });\r\n        const instance = dialog.componentInstance;\r\n        instance.dialogRef = dialog;\r\n        if (config.title) instance.title = config.title;\r\n        if (config.description) instance.description = config.description;\r\n        if (config.fields && config.fields.length) instance.fields = config.fields;\r\n        if (config.onSubmit) instance.submit.subscribe(() => config.onSubmit(instance));\r\n        return dialog;\r\n    }\r\n\r\n    openCreatePostDialog(): void {\r\n        const titleControl = new FormControl(null, [Validators.required]);\r\n        const contentControl = new FormControl(null, [Validators.required]);\r\n        this.openGenericDialog({\r\n            title: 'Create Post',\r\n            fields: [\r\n                { element: 'input',     name: 'title input',   label: 'Title',   formControl: titleControl },\r\n                { element: 'text-area', name: 'content input', label: 'Content', formControl: contentControl }\r\n            ],\r\n            onSubmit: async ref => {\r\n            ref.loading = true;\r\n            const createPostResponse = await this.account.createPost(titleControl.value, contentControl.value);\r\n            if (createPostResponse.ok === true) {\r\n                ref.closeDialog();\r\n            } else throw new Error(createPostResponse.error);\r\n            }\r\n        });\r\n    }\r\n\r\n    openRegisterDialog(): void {\r\n        if (!this.registerDialog) this.openDialog(CreateAccountDialogComponent, 'register');\r\n    }\r\n\r\n    openLoginDialog(): void {\r\n        if (!this.loginDialog) this.openDialog(LoginDialogComponent, 'login');\r\n    }\r\n\r\n    openChangeUsernameDialog(): void {\r\n        this.dialog.open(ChangeUsernameDialogComponent, { autoFocus: false });\r\n    }\r\n\r\n    openDeleteAccountDialog(): void {\r\n        this.dialog.open(DeleteAccountConfirmDialogComponent);\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nexport const LOCAL_STORAGE_ACCOUNT_KEY = 'spf-account';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class LocalStorageService {\r\n    write(key: string, data: object): void {\r\n        localStorage.setItem(key, JSON.stringify(data));\r\n    }\r\n\r\n    read<T>(key: string): T {\r\n        const data = JSON.parse(localStorage.getItem(key));\r\n        return data || null;\r\n    }\r\n\r\n    delete(key: string): void {\r\n        localStorage.removeItem(key);\r\n    }\r\n}\r\n","export function basicAuthorization(username: string, password: string): string {\r\n    return `Basic ${btoa(`${username}:${password}`)}`;\r\n}\r\n","import { ApiService } from 'spiff/app/api/services/api.service';\r\nimport { IGetPosts, Post } from 'spiff/app/api/interface';\r\nimport { Injectable, EventEmitter } from '@angular/core';\r\n\r\nexport class GetPostError extends Error {\r\n    constructor(message: string, public error: IGetPosts.ErrorTx['error']) {\r\n        super(message);\r\n    }\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PostService {\r\n    postEvents = new EventEmitter<string>();\r\n\r\n    constructor(private api: ApiService) { }\r\n\r\n    public async getPostsByUserId(id: string, includeAuthorUser = false): Promise<Post[]> {\r\n        const postsRequest = await this.api.getPosts({ author: id, ...includeAuthorUser && { include: 'authorUser' } });\r\n        if (postsRequest.ok === true) {\r\n            return postsRequest.posts;\r\n        } else {\r\n            console.error(`Error while requesting posts: ${postsRequest.error}`);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    async getPostById(id: string, includeAuthorUser = false): Promise<Post> {\r\n        const postRequest = await this.api.getPosts({ id, ...includeAuthorUser && { include: 'authorUser' } });\r\n        if (postRequest.ok === true) {\r\n            return postRequest.posts[0];\r\n        } else throw new GetPostError(`Error while requesting post ${id}: ${postRequest.error}`, postRequest.error);\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found',\n  templateUrl: './not-found.component.html',\n  styleUrls: ['./not-found.component.scss']\n})\nexport class NotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>not-found works!</p>\n","import { Injectable, EventEmitter } from '@angular/core';\r\nimport { User }       from 'api/interface/data-types';\r\nimport { ApiService } from 'api/services/api.service';\r\nimport {\r\n    ICreatePost,\r\n    IDeleteUser,\r\n    IGetRates,\r\n    IPatch,\r\n    IPostComment,\r\n    IRateComment,\r\n    IRatePost\r\n} from 'api/interface';\r\nimport {\r\n    LOCAL_STORAGE_ACCOUNT_KEY,\r\n    LocalStorageService\r\n} from 'services/local-storage.service';\r\n\r\nexport type UserAccountEvent = 'LOG_IN' | 'LOG_OUT' | 'PASSWORD_CHANGE';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class UserAccountService {\r\n    password: string;\r\n    user: User = null;\r\n    events = new EventEmitter<UserAccountEvent>();\r\n    ratedPosts = new Map<string, boolean>();\r\n    ratedComments = new Map<string, boolean>();\r\n\r\n    constructor(private ls: LocalStorageService, private api: ApiService) { }\r\n\r\n    async login(username: string, password: string): Promise<boolean> {\r\n        const authenticateRequest = await this.api.authorize(username, password);\r\n        if (authenticateRequest.ok) {\r\n            this.password = password;\r\n            const getUserRes = await this.api.getUsers({ username });\r\n            if (getUserRes.ok) {\r\n                this.user = getUserRes.users[0];\r\n                const getRatesRes = await this.getRates();\r\n                if (getRatesRes.ok) {\r\n                    for (const postId of getRatesRes.rates.posts.liked)\r\n                        this.ratedPosts.set(postId, true);\r\n                    for (const postId of getRatesRes.rates.posts.disliked)\r\n                        this.ratedPosts.set(postId, false);\r\n                    for (const commentId of getRatesRes.rates.comments.liked)\r\n                        this.ratedComments.set(commentId, true);\r\n                    for (const commentId of getRatesRes.rates.comments.disliked)\r\n                        this.ratedComments.set(commentId, false);\r\n                } else {\r\n                    console.error('Received an error from the API while requesting user' +\r\n                    'rates during login.\\n' + JSON.stringify(getRatesRes));\r\n                    return false;\r\n                }\r\n                this.events.emit('LOG_IN');\r\n            } else {\r\n                console.error('Received an error from the API while requesting user\\n' +\r\n                JSON.stringify(getUserRes));\r\n                return false;\r\n            }\r\n            this.ls.write(LOCAL_STORAGE_ACCOUNT_KEY, { username, password });\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    logOut(): void {\r\n        this.user = null;\r\n        this.ls.delete(LOCAL_STORAGE_ACCOUNT_KEY);\r\n        this.events.emit('LOG_OUT');\r\n    }\r\n\r\n    async deregister(): Promise<IDeleteUser.Tx> {\r\n        const deregisterResponse = await this.api.deregister(this.user.username, this.password);\r\n        if (deregisterResponse.ok === true) this.logOut();\r\n        return deregisterResponse;\r\n    }\r\n\r\n    patch(changes: {\r\n        username?: string;\r\n        password?: string;\r\n        screenname?: string;\r\n    }): Promise<IPatch.Tx> {\r\n        return this.api.patch(this.user.username, this.password, changes);\r\n    }\r\n\r\n    createPost(title: string, content: string): Promise<ICreatePost.Tx> {\r\n        return this.api.createPost(this.user.username, this.password, title, content);\r\n    }\r\n\r\n    ratePost(postId: string, rating: -1 | 0 | 1): Promise<IRatePost.Tx> {\r\n        return this.api.ratePost(this.user.username, this.password, postId, rating);\r\n    }\r\n\r\n    getRates(): Promise<IGetRates.Tx> {\r\n        return this.api.getRates(this.user.username, this.password, this.user._id);\r\n    }\r\n\r\n    postComment(parentType: 'post' | 'comment', parentId: string, content: string): Promise<IPostComment.Tx> {\r\n        return this.api.postComment(this.user.username, this.password, parentType, parentId, content);\r\n    }\r\n\r\n    rateComment(commentId: string, rating: -1 | 0 | 1): Promise<IRateComment.Tx> {\r\n        return this.api.rateComment(this.user.username, this.password, commentId, rating);\r\n    }\r\n\r\n    usernameChanged(newUsername: string): void {\r\n        this.user.username = newUsername;\r\n        this.ls.write(LOCAL_STORAGE_ACCOUNT_KEY, { username: newUsername, password: this.password });\r\n    }\r\n\r\n    passwordChanged(password: string): void {\r\n        this.password = password;\r\n        this.ls.write(LOCAL_STORAGE_ACCOUNT_KEY, { username: this.user.username, password: this.password });\r\n        this.events.emit('PASSWORD_CHANGE');\r\n    }\r\n}\r\n","export { LoginDialogComponent } from './login-dialog.component';\r\n","import { Router } from '@angular/router';\r\nimport { Component } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { SnackbarService } from 'spiff/app/services/snackbar.service';\r\nimport { UserAccountService } from 'spiff/app/services/user-account.service';\r\n\r\n@Component({\r\n    selector: 'spiff-delete-account-confirm-dialog',\r\n    templateUrl: './delete-account-confirm-dialog.component.html',\r\n    styleUrls: ['./delete-account-confirm-dialog.component.scss']\r\n})\r\nexport class DeleteAccountConfirmDialogComponent {\r\n    accountDeletionInProgress = false;\r\n\r\n    constructor(private dialog: MatDialog,\r\n                private router: Router,\r\n                private snackbar: SnackbarService,\r\n                private account: UserAccountService) { }\r\n\r\n    async deleteAccount(): Promise<void> {\r\n        this.accountDeletionInProgress = true;\r\n        const deregisterRequest = await this.account.deregister();\r\n        if (deregisterRequest.ok === true) {\r\n            this.accountDeletionInProgress = false;\r\n            this.dialog.closeAll();\r\n            this.account.logOut();\r\n            this.snackbar.push('Account successfully deleted.', 'OK', 3000);\r\n            this.router.navigate(['']);\r\n        } else throw new Error(deregisterRequest.error);\r\n    }\r\n\r\n}\r\n","<h1 mat-dialog-title>Are you sure you want to delete your account?</h1>\r\n<div mat-dialog-content>\r\n    <p>This action is irreversable! Your posts will be removed.</p>\r\n</div>\r\n<div mat-dialog-actions>\r\n    <button mat-button color=\"primary\">Cancel</button>\r\n    <spiff-button [theme]=\"'warn'\" [loading]=\"accountDeletionInProgress\" (click)=\"deleteAccount()\">Delete</spiff-button>\r\n</div>","import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'spiff-form-field',\r\n    templateUrl: './form-field.component.html',\r\n    styleUrls: ['./form-field.component.scss']\r\n})\r\nexport class FormFieldComponent implements OnInit {\r\n\r\n    @Input() inputType = 'text';\r\n    @Input() label = 'Form Field';\r\n    @Input() value: string;\r\n    @Input() control = new FormControl();\r\n\r\n    @Input() errorStrategy: DisplayErrorStrategy = 'all';\r\n    @Input() errorPriority: string[];\r\n    @Input() errorMap = new Map<string, string>();\r\n\r\n    errors: string[] = [];\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit(): void {\r\n        this.control.setValue(this.value);\r\n        if (this.errorStrategy === 'priority' && !this.errorPriority) {\r\n            throw new Error('Error strategy set to \"Priority\" but no errorPriority was provided!');\r\n        }\r\n    }\r\n\r\n    useErrorMap(error: string): string {\r\n        return this.errorMap.has(error) ? this.errorMap.get(error) : `Error: ${error}`;\r\n    }\r\n\r\n    hasErrors(): boolean {\r\n        this.errors = [];\r\n        switch (this.errorStrategy) {\r\n            case 'none':\r\n                return false;\r\n            case 'all':\r\n                if (this.control.errors) {\r\n                    Object.keys(this.control.errors).forEach(error => this.errors.push(this.useErrorMap(error)));\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            case 'priority':\r\n                if (this.control.errors) {\r\n                    let lastError: string;\r\n                    for (const error of this.errorPriority) {\r\n                        lastError = error;\r\n                        if (this.control.errors[error] !== undefined) {\r\n                            this.errors.push(this.useErrorMap(error));\r\n                            return true;\r\n                        }\r\n                    }\r\n                    throw new Error(`Error strategy set to priority but error \"${lastError}\" is not present in errorPriority!`);\r\n                } else {\r\n                    return false;\r\n                }\r\n        }\r\n    }\r\n\r\n}\r\n\r\ntype DisplayErrorStrategy = 'none' | 'all' | 'priority';\r\n","<mat-form-field>\n    <mat-label>{{ label }}</mat-label>\n    <input matInput [type]=\"inputType\" name=\"wtf\" [formControl]=\"control\">\n    <mat-error *ngIf=\"hasErrors()\">\n        <span class=\"error\" *ngFor=\"let error of errors\">{{ error }}</span>\n    </mat-error>\n</mat-form-field>","export { ChangeUsernameDialogComponent } from './change-username-dialog.component';\r\n","import { Router } from '@angular/router';\r\nimport { Component } from '@angular/core';\r\nimport { ApiService } from 'spiff/app/api/services/api.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { UserAccountService } from 'spiff/app/services/user-account.service';\r\nimport { AbstractControl, FormControl, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'spiff-create-account-dialog',\r\n    templateUrl: './create-account-dialog.component.html',\r\n    styleUrls: ['./create-account-dialog.component.scss']\r\n})\r\nexport class CreateAccountDialogComponent {\r\n    public registerError: string;\r\n    public creatingAccount = false;\r\n    public retypePasswordErrorMap = new Map<string, string>();\r\n    public retypePasswordErrorPriority = ['required', 'sameValue'];\r\n    public usernameControl = new FormControl('', [Validators.required]);\r\n    public passwordControl = new FormControl('', [Validators.required]);\r\n    public retypePasswordControl = new FormControl('', [Validators.required, this.sameValueValidator(this.passwordControl)]);\r\n\r\n    constructor(private dialog: MatDialogRef<CreateAccountDialogComponent>,\r\n                private api: ApiService,\r\n                private snackbar: MatSnackBar,\r\n                private user: UserAccountService,\r\n                private router: Router) {\r\n        this.retypePasswordErrorMap.set('required', 'Please retype your password');\r\n        this.retypePasswordErrorMap.set('sameValue', 'Passwords to not match');\r\n    }\r\n\r\n    private sameValueValidator(mustMatch: AbstractControl): ValidatorFn {\r\n        return (control: AbstractControl): ValidationErrors | null => {\r\n            const sameValue = mustMatch.value === control.value;\r\n            return sameValue ? null : { sameValue: false };\r\n        };\r\n    }\r\n\r\n    public async createAccount(): Promise<void> {\r\n        this.creatingAccount = true;\r\n        const registerRequest = await this.api.register(this.usernameControl.value, this.passwordControl.value);\r\n        if (registerRequest.ok) {\r\n            await this.user.login(this.usernameControl.value, this.passwordControl.value);\r\n            this.creatingAccount = false;\r\n            this.dialog.close();\r\n            this.snackbar.open('Successfully created new account.', 'OK', { duration: 3000 });\r\n            this.router.navigate(['user', this.user.user.username]);\r\n        } else {\r\n            this.creatingAccount = false;\r\n            this.registerError = (registerRequest as any).error;\r\n            console.log('There literally is an error but i can\\'t access it: ' + (registerRequest as any).error);\r\n        }\r\n    }\r\n\r\n}\r\n","<h1 mat-dialog-title>Register</h1>\r\n<div mat-dialog-content>\r\n    <form class=\"register-form\">\r\n        <mat-form-field>\r\n            <mat-label>Username</mat-label>\r\n            <input matInput [formControl]=\"usernameControl\" #ngUsername>\r\n            <mat-error *ngIf=\"usernameControl.hasError('required')\">\r\n                Please enter your username\r\n            </mat-error>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field>\r\n            <mat-label>Password</mat-label>\r\n            <input matInput type=\"password\" [formControl]=\"passwordControl\" #ngPassword>\r\n            <mat-error *ngIf=\"passwordControl.hasError('required')\">\r\n                Please enter your password\r\n            </mat-error>\r\n        </mat-form-field>\r\n\r\n        <spiff-form-field\r\n            label=\"Retype Password\"\r\n            [control]=\"retypePasswordControl\"\r\n            errorStrategy=\"priority\"\r\n            [errorPriority]=\"retypePasswordErrorPriority\"\r\n            [errorMap]=\"retypePasswordErrorMap\">\r\n        </spiff-form-field>\r\n    </form>\r\n\r\n    <mat-error *ngIf=\"registerError\">{{ registerError }}</mat-error>\r\n    <spiff-button\r\n            class=\"create-account-button\"\r\n            [disabled]=\"!usernameControl.valid || !passwordControl.valid || !retypePasswordControl.valid\"\r\n            [loading]=\"creatingAccount\"\r\n            (click)=\"createAccount()\">\r\n        Create Account\r\n    </spiff-button>\r\n</div>","import { MatDialog } from '@angular/material/dialog';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { UserAccountService } from 'spiff/app/services/user-account.service';\r\n\r\n@Component({\r\n    selector: 'spiff-change-username-dialog',\r\n    templateUrl: './change-username-dialog.component.html',\r\n    styleUrls: ['./change-username-dialog.component.scss']\r\n})\r\nexport class ChangeUsernameDialogComponent implements OnInit {\r\n    loggedIn = false;\r\n    usernameFormControl = new FormControl();\r\n\r\n    constructor(private account: UserAccountService, private dialog: MatDialog) {}\r\n\r\n    ngOnInit(): void {\r\n        this.loggedIn = !!this.account.user;\r\n        if (!this.loggedIn) this.account.events.subscribe((event: boolean) => this.loggedIn = event);\r\n    }\r\n\r\n    getUsername(): string {\r\n        return this.account.user.username;\r\n    }\r\n\r\n    canChange(): boolean {\r\n        return this.usernameFormControl.value !== this.account.user.username;\r\n    }\r\n\r\n    async changeUsername(): Promise<void> {\r\n        const newUsername = this.usernameFormControl.value;\r\n        const updateRequest = await this.account.patch({ username: newUsername });\r\n        if (updateRequest.ok) {\r\n            this.account.usernameChanged(newUsername);\r\n            this.dialog.closeAll();\r\n        }\r\n    }\r\n\r\n}\r\n","<h1 mat-dialog-title>Change Username</h1>\r\n\r\n<ng-container *ngIf=\"loggedIn; else spinner\">\r\n    <div mat-dialog-content>\r\n        <p>Your username will be changed. Your new username must be unique.</p>\r\n        <spiff-form-field\r\n            [label]=\"'Username'\"\r\n            [value]=\"getUsername()\"\r\n            [control]=\"usernameFormControl\"></spiff-form-field>\r\n    </div>\r\n    <div mat-dialog-actions class=\"\">\r\n        <button mat-button color=\"primary\">Cancel</button>\r\n        <spiff-button [disabled]=\"!canChange()\" (action)=\"changeUsername()\">Change</spiff-button>\r\n    </div>\r\n</ng-container>\r\n\r\n<ng-template #spinner>\r\n    <mat-spinner></mat-spinner>\r\n</ng-template>","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'commaNumber' })\r\nexport class CommaNumberPipe implements PipeTransform {\r\n    transform(num: number): string {\r\n        const numString = num.toString();\r\n        let numOfCommas = Math.floor(numString.length / 3);\r\n        let final = '';\r\n        let counter = 0;\r\n        for (let i = numString.length - 1; i >= 0; i--) {\r\n            counter++;\r\n            final += numString.charAt(i);\r\n            if (counter % 3 === 0 && i !== 0)\r\n                final += ',';\r\n        }\r\n        return final.split('').reverse().join('');\r\n    }\r\n}\r\n","import { DialogService } from 'spiff/app/services/dialog.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { SnackbarService } from 'spiff/app/services/snackbar.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { UserAccountEvent, UserAccountService } from 'spiff/app/services/user-account.service';\r\nimport { LOCAL_STORAGE_ACCOUNT_KEY, LocalStorageService } from 'spiff/app/services/local-storage.service';\r\n\r\n@Component({\r\n    selector: 'spiff-root',\r\n    templateUrl: './app.component.html',\r\n    styleUrls: ['./app.component.scss']\r\n})\r\nexport class RootComponent implements OnInit {\r\n    username = '';\r\n    signedIn = false;\r\n    loadingUsername = false;\r\n\r\n    constructor(public dialog: DialogService,\r\n                private route: ActivatedRoute,\r\n                private snack: SnackbarService,\r\n                public account: UserAccountService,\r\n                private localStorage: LocalStorageService) { }\r\n\r\n    async ngOnInit(): Promise<void> {\r\n        this.route.queryParams.subscribe(query => {\r\n            if (!query.dialog) return;\r\n            switch (query.dialog) {\r\n                case 'login':\r\n                    this.dialog.openLoginDialog();\r\n                    break;\r\n                default:\r\n                    throw new Error(`Unknown dialog query param provided: \"${query.dialog}\".`);\r\n            }\r\n        });\r\n        this.account.events.subscribe((event: UserAccountEvent) => {\r\n            switch (event) {\r\n                case 'LOG_IN':\r\n                    this.signedIn = true;\r\n                    this.username = this.account.user.username;\r\n                    break;\r\n                case 'LOG_OUT':\r\n                    this.signedIn = false;\r\n                    this.username = null;\r\n                    break;\r\n                case 'PASSWORD_CHANGE':\r\n                    break;\r\n            }\r\n        });\r\n\r\n        // Log the user in automatically if there is data in local storage\r\n        try {\r\n            const readOperation = this.localStorage.read<any>(LOCAL_STORAGE_ACCOUNT_KEY);\r\n            if (readOperation) {\r\n                this.loadingUsername = true;\r\n                const login = await this.account.login(readOperation.username, readOperation.password);\r\n                if (!login) {\r\n                    this.snack.push('Sorry, we were unable to log you in.', 'OK', 10000);\r\n                    this.localStorage.delete(LOCAL_STORAGE_ACCOUNT_KEY);\r\n                }\r\n                this.loadingUsername = false;\r\n            }\r\n        } catch (error) {\r\n            if (error.message === 'NoConnection') {\r\n                this.snack.push('Sorry, we could not connect to our services.', 'OK', 10000);\r\n                this.loadingUsername = false;\r\n            } else {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n}\r\n","<mat-toolbar color=\"primary\">\r\n\r\n    <span routerLink=\"/\" class=\"title\">Spiffing</span>\r\n    <span class=\"spacer\"></span>\r\n    <button mat-icon-button (click)=\"dialog.openCreatePostDialog()\" *ngIf=\"signedIn\">\r\n        <mat-icon >add</mat-icon>\r\n    </button>\r\n    <button *ngIf=\"!signedIn; else loggedInOptions\" mat-button (click)=\"dialog.openLoginDialog()\">\r\n        <mat-spinner class=\"username-spinner\" [diameter]=\"30\" *ngIf=\"loadingUsername; else signInTemplate\"></mat-spinner>\r\n        <ng-template #signInTemplate>Sign In</ng-template>\r\n    </button>\r\n\r\n    <ng-template #loggedInOptions>\r\n        <button mat-button [mat-menu-trigger-for]=\"accountDropdown\">{{ username }}</button>\r\n        <mat-menu #accountDropdown>\r\n            <button mat-menu-item [routerLink]=\"'/user/' + username\">Profile</button>\r\n            <button mat-menu-item [routerLink]=\"'/settings'\">Settings</button>\r\n            <button mat-menu-item (click)=\"account.logOut()\">Sign Out</button>\r\n        </mat-menu>\r\n    </ng-template>\r\n\r\n</mat-toolbar>\r\n<router-outlet></router-outlet>\r\n","// This file is autogenerated; changes may be overwritten.\n\nexport interface IBaseResponse {\r\n    ok: boolean;\r\n}\r\n\r\nexport interface IOkResponse extends IBaseResponse {\r\n    ok: true;\r\n}\r\n\r\nexport interface IErrorResponse<ErrorMessage extends string> extends IBaseResponse {\r\n    error: ErrorMessage;\r\n    ok: false;\r\n}\r\n","import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\r\n\r\nexport function sameValueValidator(mustMatch: AbstractControl): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors => {\r\n        const sameValue = mustMatch.value === control.value;\r\n        return sameValue ? null : { sameValue: { value: control.value }};\r\n    };\r\n}\r\n\r\nexport function valueMustNotBe(value: string): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors => {\r\n        return control.value !== value ? null : {\r\n            mustNotEqual: {\r\n                currentValue: control.value,\r\n                mustNotEqual: value\r\n            }\r\n        };\r\n    };\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'prettyNumber' })\r\nexport class PrettyNumberPipe implements PipeTransform {\r\n    transform(number: number): string {\r\n        if (number < 1000) return number.toString();\r\n        if (number < 1000000) return (number / 1000).toFixed(1) + 'k';\r\n        if (number < 1000000000) return (number / 1000000).toFixed(1) + 'm';\r\n        return (number / 1000000000).toFixed(1) + 'b';\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ApiHttpService }     from 'api/services/api-http.service';\r\nimport { basicAuthorization } from 'spiff/app/util/basic-auth';\r\nimport {\r\n    IAuthorize,\r\n    ICreatePost,\r\n    IDeleteUser,\r\n    IGetComments,\r\n    IGetPosts,\r\n    IGetRates,\r\n    IGetUsers,\r\n    IPatch,\r\n    IPostComment,\r\n    IRateComment,\r\n    IRatePost,\r\n    IRegister,\r\n} from 'api/interface';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ApiService {\r\n    constructor(private http: ApiHttpService) {}\r\n\r\n    register(username: string, password: string): Promise<IRegister.Tx> {\r\n        return this.http.post(['api', 'user', username], {}, {\r\n            authorization: basicAuthorization(username, password)\r\n        });\r\n    }\r\n\r\n    authorize(username: string, password: string): Promise<IAuthorize.Tx> {\r\n        return this.http.post(['api', 'authorize'], {}, {\r\n            authorization: basicAuthorization(username, password)\r\n        });\r\n    }\r\n\r\n    deregister(username: string, password: string): Promise<IDeleteUser.Tx> {\r\n        return this.http.delete(['api', 'user'], {\r\n            authorization: basicAuthorization(username, password)\r\n        });\r\n    }\r\n\r\n    patch(username: string, password: string, changes: {\r\n        username?: string;\r\n        password?: string;\r\n        screenname?: string;\r\n    }): Promise<IPatch.Tx> {\r\n        return this.http.patch(['api', 'user', username], changes, {\r\n            authorization: basicAuthorization(username, password)\r\n        });\r\n    }\r\n\r\n    getPosts(query: { author?: string; id?: string; ids?: string; include?: string; title?: string }\r\n    ): Promise<IGetPosts.Tx> {\r\n        return this.http.get(['api', 'posts'], query);\r\n    }\r\n\r\n    createPost(username: string, password: string, title: string, content: string): Promise<ICreatePost.Tx> {\r\n        return this.http.post(['api', 'post'], { title, content },\r\n            { authorization: basicAuthorization(username, password) }\r\n        );\r\n    }\r\n\r\n    ratePost(username: string, password: string, postId: string, rating: -1 | 0 | 1): Promise<IRatePost.Tx> {\r\n        return this.http.post(['api', 'rate', 'post', postId], { rating },\r\n            { authorization: basicAuthorization(username, password) }\r\n        );\r\n    }\r\n\r\n    getRates(username: string, password: string, uid: string): Promise<IGetRates.Tx> {\r\n        return this.http.get(['api', 'rated', uid], {},\r\n            { authorization: basicAuthorization(username, password) }\r\n        );\r\n    }\r\n\r\n    getUsers(query: { id?: string; ids?: string[]; username?: string; usernames?: string[]; } = {}\r\n    ): Promise<IGetUsers.Tx> {\r\n        return this.http.get(['api', 'users'], {\r\n            ... query.id  && { id: query.id },\r\n            ... query.ids && { ids: query.ids.join(',') },\r\n            ... query.username  && { username: query.username },\r\n            ... query.usernames && { usernames: query.usernames.join(',') }\r\n        });\r\n    }\r\n\r\n    postComment(username: string, password: string, parentType: 'post' | 'comment', parentId: string, content: string\r\n    ): Promise<IPostComment.Tx> {\r\n        return this.http.post(\r\n            ['api', 'comment', parentType, parentId],\r\n            { content },\r\n            { authorization: basicAuthorization(username, password) }\r\n        );\r\n    }\r\n\r\n    getComments(query: { parent?: { type: 'comment' | 'post'; id: string; }; author?: string; } = {},\r\n    includeAuthorUser?: boolean): Promise<IGetComments.Tx> {\r\n        return this.http.get(['api', 'comments'], {\r\n            ...query.parent && { parentType: query.parent.type, parentId: query.parent.id },\r\n            ...query.author && { author: query.author },\r\n            ...includeAuthorUser !== undefined && { include: 'authorUser' }\r\n        });\r\n    }\r\n\r\n    rateComment(username: string, password: string, commentId: string, rating: -1 | 0 | 1): Promise<IRateComment.Tx> {\r\n        return this.http.post(['api', 'rate', 'comment', commentId], { rating },\r\n            { authorization: basicAuthorization(username, password) }\r\n        );\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { DateAgoPipe } from 'spiff/app/pipes/date-ago.pipe';\r\nimport { RootComponent } from 'spiff/app/app.component';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { PostComponent } from 'spiff/app/ui/views/post/post.component';\r\nimport { MaterialModule } from 'spiff/app/material.module';\r\nimport { CommaNumberPipe } from 'spiff/app/pipes/comma-number.pipe';\r\nimport { DialogComponent } from 'spiff/app/ui/components';\r\nimport { AppRoutingModule } from 'spiff/app/app-routing.module';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { PrettyNumberPipe } from 'spiff/app/pipes/pretty-number.pipe';\r\nimport { NotFoundComponent } from 'spiff/app/components/not-found/not-found.component';\r\nimport { FormFieldComponent } from 'spiff/app/components/form-field/form-field.component';\r\nimport { LandingPageComponent } from 'spiff/app/ui/views/landing-page';\r\nimport { LoginDialogComponent } from 'spiff/app/ui/components/dialogs/login-dialog';\r\nimport { RateCounterComponent } from 'spiff/app/ui/components/rate-counter/rate-counter.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { StandaloneCardComponent } from 'spiff/app/components/standalone-card/standalone-card.component';\r\nimport { TextFieldDialogComponent } from './ui/components/text-field-dialog/text-field-dialog.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { ButtonComponent, ViewCardComponent } from 'spiff/app/ui/components';\r\nimport { ProfileComponent, SettingsComponent } from 'spiff/app/ui/views';\r\nimport { CreateAccountDialogComponent, DeleteAccountConfirmDialogComponent, ChangeUsernameDialogComponent } from './ui/components/dialogs';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        DateAgoPipe,\r\n        RootComponent,\r\n        PostComponent,\r\n        ButtonComponent,\r\n        CommaNumberPipe,\r\n        DialogComponent,\r\n        PrettyNumberPipe,\r\n        ProfileComponent,\r\n        NotFoundComponent,\r\n        SettingsComponent,\r\n        ViewCardComponent,\r\n        FormFieldComponent,\r\n        LandingPageComponent,\r\n        LoginDialogComponent,\r\n        RateCounterComponent,\r\n        StandaloneCardComponent,\r\n        TextFieldDialogComponent,\r\n        CreateAccountDialogComponent,\r\n        ChangeUsernameDialogComponent,\r\n        DeleteAccountConfirmDialogComponent\r\n    ],\r\n    imports: [\r\n        FormsModule,\r\n        BrowserModule,\r\n        MaterialModule,\r\n        AppRoutingModule,\r\n        HttpClientModule,\r\n        ReactiveFormsModule,\r\n        BrowserAnimationsModule\r\n    ],\r\n    bootstrap: [RootComponent]\r\n})\r\nexport class AppModule { }\r\n","import { FormControl } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { errorsToString } from 'spiff/app/forms/validator-error-string';\r\nimport { Component, EventEmitter, OnInit } from '@angular/core';\r\n\r\ninterface InputElement {\r\n    name: string;\r\n    label: string;\r\n    defaultValue?: string;\r\n    formControl?: FormControl;\r\n    element: 'input' | 'text-area';\r\n}\r\n\r\ninterface Input extends InputElement {\r\n    element: 'input';\r\n    type?: 'text' | 'password';\r\n}\r\n\r\ninterface TextArea extends InputElement {\r\n    element: 'text-area';\r\n}\r\n\r\nexport type AcceptedElements = Input | TextArea;\r\n\r\n@Component({\r\n    selector: 'spiff-text-field-dialog',\r\n    templateUrl: './text-field-dialog.component.html',\r\n    styleUrls: ['./text-field-dialog.component.scss']\r\n})\r\nexport class TextFieldDialogComponent implements OnInit {\r\n    title = 'Title';\r\n    loading = false;\r\n    fields: AcceptedElements[];\r\n    submit = new EventEmitter();\r\n    cancelButtonText = 'Cancel';\r\n    submitButtonText = 'Submit';\r\n    description = 'Description.';\r\n    dialogRef: MatDialogRef<TextFieldDialogComponent>;\r\n\r\n    ngOnInit(): void {\r\n        if (this.dialogRef === undefined || this.dialogRef === null) throw new Error(`TextFieldDialogComponent: dialogRef is ${this.dialogRef}.`);\r\n        if (this.fields === undefined || this.fields === null) throw new Error(`TextFieldDialogComponent: fields is ${this.fields}.`);\r\n        if (this.title === 'Title') console.warn('TextFieldDialogCopmonent: title is unchanged.');\r\n        if (this.description === 'Description.') console.warn('TextFieldDialogCopmonent: description is unchanged.');\r\n        if (this.fields.length === 0) console.warn('TextFieldDialogComponent: fields length is 0.');\r\n        else for (const field of this.fields) {\r\n            if (field.formControl === undefined || field.formControl === null) field.formControl = new FormControl();\r\n            switch (field.element) {\r\n                case 'input':\r\n                    if (!field.type) field.type = 'text';\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    isValid(): boolean {\r\n        for (const field of this.fields)\r\n            if (!field.formControl.dirty || field.formControl.errors !== null) return false;\r\n        return true;\r\n    }\r\n\r\n    getError(field: AcceptedElements): string {\r\n        const control = field.formControl;\r\n        if (control.errors === null)\r\n            throw new Error(`TextFieldDialogComponent: getError called but form control ${field.name} has no errors.`);\r\n        return errorsToString(control.errors);\r\n    }\r\n\r\n    closeDialog(): void {\r\n        this.dialogRef.close();\r\n    }\r\n\r\n    asInput(input: AcceptedElements): Input {\r\n        return input as Input;\r\n    }\r\n}\r\n","<h1 mat-dialog-title>{{ title }}</h1>\r\n<div mat-dialog-content>\r\n    <p *ngIf=\"description\">{{ description }}</p>\r\n    <div *ngFor=\"let field of fields\">\r\n        <ng-container [ngSwitch]=\"field.element\">\r\n            <mat-form-field *ngSwitchCase=\"'input'\">\r\n                <mat-label>{{ field.label }}</mat-label>\r\n                <input matInput [type]=\"asInput(field).type\" [formControl]=\"field.formControl\">\r\n                <mat-error *ngIf=\"field.formControl.errors\">\r\n                    <span>{{ getError(field) }}</span>\r\n                </mat-error>\r\n            </mat-form-field>\r\n            <mat-form-field *ngSwitchCase=\"'text-area'\">\r\n                <mat-label>{{ field.label }}</mat-label>\r\n                <textarea matInput [formControl]=\"field.formControl\"></textarea>\r\n                <mat-error *ngIf=\"field.formControl.errors\">\r\n                    <span>{{ getError(field) }}</span>\r\n                </mat-error>\r\n            </mat-form-field>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n<div mat-dialog-actions class=\"actions\">\r\n    <button mat-button color=\"primary\" [disabled]=\"loading\" (click)=\"closeDialog()\">{{ cancelButtonText }}</button>\r\n    <spiff-button [disabled]=\"!isValid()\" [loading]=\"loading\" (action)=\"submit.emit()\">{{ submitButtonText }}</spiff-button>\r\n</div>","export { SettingsComponent } from './settings.component';\r\n","<div class=\"full-page-container\">\n    <mat-card class=\"standalone-card\">\n        <mat-card-header *ngIf=\"title\">\n            <h1>{{ title }}</h1>\n        </mat-card-header>\n        <mat-card-content>\n            <ng-content></ng-content>\n        </mat-card-content>\n    </mat-card>\n</div>","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-standalone-card',\n  templateUrl: './standalone-card.component.html',\n  styleUrls: ['./standalone-card.component.scss']\n})\nexport class StandaloneCardComponent implements OnInit {\n\n  @Input() title: string;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","// This file is autogenerated; changes may be overwritten.\n\nimport { IErrorResponse } from '../response';\r\n\r\nexport interface IObjectIdParseError extends IErrorResponse<'Object Id Parse'> {\r\n    provided: string;\r\n}\r\n\r\nexport interface INoUserFoundError extends IErrorResponse<'No User Found'> {\r\n    id: string;\r\n}\r\n\r\nexport interface INoPostFoundError extends IErrorResponse<'No Post Found'> {\r\n    id: string;\r\n}\r\n\r\nexport interface INoCommentFoundError extends IErrorResponse<'No Comment Found'> {\r\n    id: string;\r\n}\r\n\r\nexport interface IMissingDataError extends IErrorResponse<'Missing Data'> {\r\n    missing: {\r\n        received: string[];\r\n        'scope-name': string;\r\n        required: string[];\r\n    };\r\n}\r\n\r\nexport interface IUnauthenticatedError extends IErrorResponse<'Unauthenticated'> { }\r\n\r\nexport interface IUnauthorizedError extends IErrorResponse<'Unauthorized'> { }\r\n\r\nexport interface IAuthorizationParseError extends IErrorResponse<'Authorization Parsing Error'> {\r\n    part: 'Authorization Type' | 'Username' | 'Password';\r\n}\r\n\r\nexport type AuthorizedRequestError = IAuthorizationParseError | IUnauthenticatedError | IUnauthorizedError;\r\n\r\nexport interface IAuthHeaderIdParamMismatchError extends IErrorResponse<'Authorization Header and Id Param Mismatch'> {\r\n    headerId: string;\r\n    paramId: string;\r\n}\r\n\r\nexport interface IIllegalValueError extends IErrorResponse<'Illegal Value'> {\r\n    providedValue: any;\r\n    allowedValues: any[];\r\n    context: string;\r\n}\r\n","export * from './settings';\r\nexport * from './profile';","// This file is autogenerated; changes may be overwritten.\n\nexport interface Post {\r\n    _id: string;\r\n    author: string | User;\r\n    comments: string[];\r\n    content: string;\r\n    date: number;\r\n    dislikes: number;\r\n    likes: number;\r\n    title: string;\r\n}\r\n\r\nexport interface User {\r\n    _id: string;\r\n    created: number;\r\n    screenname: string;\r\n    username: string;\r\n}\r\n\r\nexport interface Comment {\r\n    _id: string;\r\n    author: string | User;\r\n    content: string;\r\n    created: number;\r\n    dislikes: number;\r\n    likes: number;\r\n    replies: string[];\r\n    parent: {\r\n        _id: string;\r\n        contentType: 'post' | 'comment';\r\n    }\r\n}\r\n\r\nexport interface Rates {\r\n    _id: string;\r\n    owner: string;\r\n    comments: {\r\n        liked: string[];\r\n        disliked: string[];\r\n    }\r\n    posts: {\r\n        liked: string[];\r\n        disliked: string[];\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'spiff-view-card',\r\n    templateUrl: './view-card.component.html',\r\n    styleUrls: ['./view-card.component.scss']\r\n})\r\nexport class ViewCardComponent implements OnInit {\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n}\r\n","<mat-card class=\"view-card\">\r\n    <ng-content></ng-content>\r\n</mat-card>\r\n","import { UserAccountService } from 'spiff/app/services/user-account.service';\r\nimport { FormControl, Validators } from '@angular/forms';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { CreateAccountDialogComponent } from 'spiff/app/ui/components/dialogs/create-account-dialog';\r\nimport { Component, ElementRef, ViewChild, AfterViewInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'spiff-login-dialog',\r\n    templateUrl: './login-dialog.component.html',\r\n    styleUrls: ['./login-dialog.component.scss']\r\n})\r\nexport class LoginDialogComponent implements AfterViewInit {\r\n    errorMessage: string;\r\n    loginInProgress: boolean;\r\n    usernameForm = new FormControl('', [Validators.required]);\r\n    passwordForm = new FormControl('', [Validators.required]);\r\n    @ViewChild('templateUsernameForm') templateUsernameForm: ElementRef;\r\n    @ViewChild('templatePasswordForm') templatePasswordForm: ElementRef;\r\n\r\n    constructor(private account: UserAccountService,\r\n                private createAccountDialog: MatDialog,\r\n                private dialog: MatDialogRef<LoginDialogComponent>) { }\r\n\r\n    ngAfterViewInit(): void {\r\n        setTimeout(() => this.templateUsernameForm.nativeElement.focus(), 0);\r\n    }\r\n\r\n    onUsernameKeyPress(event: KeyboardEvent): void {\r\n        if (event.key !== 'Enter') return;\r\n        if (this.usernameForm.valid) this.templatePasswordForm.nativeElement.focus();\r\n    }\r\n\r\n    onPasswordKeyPress(event: KeyboardEvent): void {\r\n        if (event.key !== 'Enter') return;\r\n        if (this.usernameForm.valid && this.passwordForm.valid) this.submitSignIn();\r\n    }\r\n\r\n    async submitSignIn(): Promise<void> {\r\n        this.errorMessage = null;\r\n        this.loginInProgress = true;\r\n        try {\r\n            const login = await this.account.login(this.usernameForm.value, this.passwordForm.value);\r\n            this.loginInProgress = false;\r\n            if (login) this.dialog.close();\r\n            else this.errorMessage = 'Incorrect username or password.';\r\n        } catch (error) {\r\n            if (error.message === 'NoConnection') {\r\n                this.errorMessage = 'Could not connect to our services.';\r\n                this.loginInProgress = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    createNewAccount(): void {\r\n        this.dialog.close();\r\n        this.createAccountDialog.open(CreateAccountDialogComponent, { width: 'fit-content' });\r\n    }\r\n}\r\n","<h1 mat-dialog-title>Log In</h1>\r\n<div mat-dialog-content>\r\n    <form class=\"login-form\">\r\n        <mat-form-field>\r\n            <mat-label>Username</mat-label>\r\n            <input #templateUsernameForm matInput [formControl]=\"usernameForm\" (keypress)=\"onUsernameKeyPress($event)\">\r\n            <mat-error *ngIf=\"usernameForm.hasError('required')\">\r\n                Please enter your username\r\n            </mat-error>\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <mat-label>Password</mat-label>\r\n            <input #templatePasswordForm type=\"password\" matInput [formControl]=\"passwordForm\" (keypress)=\"onPasswordKeyPress($event)\">\r\n            <mat-error *ngIf=\"passwordForm.hasError('required')\">\r\n                Please enter your password\r\n            </mat-error>\r\n        </mat-form-field>\r\n    </form>\r\n    <mat-error *ngIf=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</mat-error>\r\n    <spiff-button\r\n            (click)=\"submitSignIn()\"\r\n            [disabled]=\"!(usernameForm.valid && passwordForm.valid)\"\r\n            [loading]=\"loginInProgress\"\r\n            class=\"sign-in-button\">\r\n        Sign In\r\n    </spiff-button>\r\n    <button mat-stroked-button color=\"primary\" class=\"create-account-button\" (click)=\"createNewAccount()\">Don't have an account? Create one here!</button>\r\n</div>","import { Title } from '@angular/platform-browser';\r\nimport { Router } from '@angular/router';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport changeScreenname from './change-screenname';\r\nimport { DialogService } from 'spiff/app/services/dialog.service';\r\nimport { sameValueValidator } from 'spiff/app/forms/validators';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { UserAccountEvent, UserAccountService } from 'spiff/app/services/user-account.service';\r\n\r\n@Component({\r\n    selector: 'spiff-settings-view',\r\n    templateUrl: './settings.component.html',\r\n    styleUrls: ['./settings.component.scss']\r\n})\r\nexport class SettingsComponent implements OnInit, OnDestroy {\r\n    accountEventListener: Subscription;\r\n\r\n    constructor(private title: Title,\r\n                private router: Router,\r\n                private dialog: DialogService,\r\n                private account: UserAccountService) { }\r\n\r\n    ngOnInit(): void {\r\n        if (this.account.user === null) this.router.navigate(['']);\r\n        this.title.setTitle('user settings');\r\n        this.accountEventListener = this.account.events.subscribe(this.onUserAccountEvent.bind(this));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.accountEventListener.unsubscribe();\r\n    }\r\n\r\n    onUserAccountEvent(event: UserAccountEvent): void {\r\n        if (event === 'LOG_OUT') this.router.navigate(['']);\r\n    }\r\n\r\n    changePassword(): void {\r\n        const passwordControl = new FormControl();\r\n        const retypeControl = new FormControl(null, sameValueValidator(passwordControl));\r\n        this.dialog.openGenericDialog({\r\n            title: 'Change Password',\r\n            submitText: 'Change',\r\n            description: 'Please enter what you would like your new password to be.',\r\n            fields: [\r\n                { element: 'input', name: 'password', label: 'Password',        type: 'password', formControl: passwordControl },\r\n                { element: 'input', name: 'retype',   label: 'Retype Password', type: 'password', formControl: retypeControl }\r\n            ],\r\n            onSubmit: async dialog => {\r\n                dialog.loading = true;\r\n                const updateRequest = await this.account.patch({ password: passwordControl.value });\r\n                dialog.loading = false;\r\n                if (updateRequest.ok === true) {\r\n                    this.account.passwordChanged(passwordControl.value);\r\n                    dialog.closeDialog();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    openChangeScreenname(): void {\r\n        changeScreenname(this.dialog, this.account);\r\n    }\r\n\r\n    changeUsername(): void {\r\n        this.dialog.openChangeUsernameDialog();\r\n    }\r\n\r\n    deleteAccount(): void {\r\n        this.dialog.openDeleteAccountDialog();\r\n    }\r\n}\r\n","<spiff-view-card>\r\n    <h1>Settings</h1>\r\n    <hr>\r\n    <div class=\"settings\">\r\n        <div class=\"banter-container\">\r\n            <h3>Change Password</h3>\r\n            <spiff-button (click)=\"changePassword()\">Change</spiff-button>\r\n        </div>\r\n        <div class=\"banter-container\">\r\n            <h3>Change Screen Name</h3>\r\n            <spiff-button (click)=\"openChangeScreenname()\">Change</spiff-button>\r\n        </div>\r\n        <div class=\"banter-container\">\r\n            <h3>Change Username</h3>\r\n            <spiff-button (click)=\"changeUsername()\">Change</spiff-button>\r\n        </div>\r\n        <div class=\"banter-container\">\r\n            <h3>Delete Account</h3>\r\n            <button mat-raised-button color=\"warn\" (click)=\"deleteAccount()\">Delete</button>\r\n        </div>\r\n    </div>\r\n</spiff-view-card>\r\n","export { ProfileComponent } from './profile.component';\r\n","import { Injectable } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\ninterface SnackbarData {\r\n    content: string;\r\n    button?: string;\r\n    duration?: number;\r\n}\r\n\r\ntype SnackbarEvent = 'NEW' | 'DESTROYED';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class SnackbarService {\r\n    private visibleNotifs = 0;\r\n    private maxVisibleNotifs = 3;\r\n    private notifications: SnackbarData[] = [];\r\n\r\n    constructor(private snack: MatSnackBar) { }\r\n\r\n    public push(content: string, button?: string, duration?: number): void {\r\n        this.notifications.push({ content, button, duration });\r\n        this.onSnackEvent('NEW');\r\n    }\r\n\r\n    private onSnackEvent(event: SnackbarEvent): void {\r\n        switch (event) {\r\n            case 'NEW':\r\n                if (this.visibleNotifs < this.maxVisibleNotifs) {\r\n                    const notif = this.notifications.pop();\r\n                    this.snack.open(notif.content, notif.button, { duration: notif.duration });\r\n                    this.visibleNotifs++;\r\n\r\n                    if (notif.duration) {\r\n                        setTimeout(() => this.onSnackEvent('DESTROYED'), notif.duration);\r\n                    }\r\n                }\r\n                break;\r\n            case 'DESTROYED':\r\n                this.visibleNotifs--;\r\n        }\r\n    }\r\n}\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'spiff-button',\r\n    templateUrl: './button.component.html',\r\n    styleUrls: ['./button.component.scss']\r\n})\r\nexport class ButtonComponent {\r\n    @Input() emitValue: any;\r\n    @Input() loading = false;\r\n    @Input() disabled: boolean;\r\n    @Output() action = new EventEmitter();\r\n    @Input() theme: 'primary' | 'warn' = 'primary';\r\n\r\n    onClick(): void {\r\n        if (this.disabled) return;\r\n        this.action.emit(this.emitValue);\r\n    }\r\n\r\n}\r\n","<button class=\"button\" mat-raised-button [color]='theme' [disabled]=\"disabled || loading\" (click)=\"onClick()\">\r\n    <mat-spinner *ngIf=\"loading; else content\" [diameter]=\"30\"></mat-spinner>\r\n    <ng-template #content>\r\n        <ng-content #content></ng-content>\r\n    </ng-template>\r\n</button>","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { Post } from 'spiff/app/api/interface';\r\nimport { Comment } from 'interface/data-types';\r\n\r\n@Component({\r\n    selector: 'spiff-rate-counter',\r\n    templateUrl: './rate-counter.component.html',\r\n    styleUrls: ['./rate-counter.component.scss']\r\n})\r\nexport class RateCounterComponent implements OnInit {\r\n    @Input() item: Post | Comment;\r\n    @Input() liked = false;\r\n    @Input() disliked = false;\r\n    @Output() like = new EventEmitter<Post | Comment>();\r\n    @Output() dislike = new EventEmitter<Post | Comment>();\r\n\r\n    ngOnInit(): void {\r\n        if (this.item === undefined || this.item === null) throw new Error('RateCounterComponent: item was not provided');\r\n    }\r\n}\r\n","<div class=\"row\" [ngStyle]=\"{'color': liked ? 'rgb(255,150,0)' : 'inherit'}\">\r\n    <mat-icon (click)=\"like.emit(this.item)\" class=\"pointer icon\">keyboard_arrow_up</mat-icon>\r\n    <p [title]=\"item.likes\">{{ item.likes | prettyNumber }}</p>\r\n</div>\r\n<div class=\"row\" [ngStyle]=\"{'color': disliked ? 'rgb(0,150,255)' : 'inherit'}\">\r\n    <mat-icon (click)=\"dislike.emit(this.item)\" class=\"pointer icon\">keyboard_arrow_down</mat-icon>\r\n    <p [title]=\"item.dislikes\">{{ item.dislikes | prettyNumber }}</p>\r\n</div>","export * from './data-types';\r\nexport * from './response';\r\nexport * from './responses';\r\n","import { NgModule } from '@angular/core';\r\nimport { PostComponent } from 'spiff/app/ui/views/post/post.component';\r\nimport { NotFoundComponent } from './components/not-found/not-found.component';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { LandingPageComponent } from 'spiff/app/ui/views/landing-page';\r\nimport { ProfileComponent, SettingsComponent } from './ui/views';\r\n\r\nconst routes: Routes = [\r\n    { path: '', component: LandingPageComponent },\r\n    { path: 'user/:username', component: ProfileComponent },\r\n    { path: 'post/:id', component: PostComponent },\r\n    { path: 'settings', component: SettingsComponent },\r\n    { path: '**', component: NotFoundComponent }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forRoot(routes, { relativeLinkResolution: 'legacy' })],\r\n    exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\n\r\n@NgModule({\r\n    exports: [\r\n        MatCardModule,\r\n        MatIconModule,\r\n        MatMenuModule,\r\n        MatInputModule,\r\n        MatButtonModule,\r\n        MatDialogModule,\r\n        MatDividerModule,\r\n        MatToolbarModule,\r\n        MatSnackBarModule,\r\n        MatFormFieldModule,\r\n        MatProgressSpinnerModule\r\n    ]\r\n})\r\nexport class MaterialModule { }\r\n","export { DialogComponent } from './dialog.component';\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Title }             from '@angular/platform-browser';\r\nimport { Post, User }         from 'api/interface';\r\nimport { Comment }            from 'interface/data-types';\r\nimport { DialogService }      from 'services/dialog.service';\r\nimport { PostService }        from 'services/post.service';\r\nimport { UserAccountService } from 'services/user-account.service';\r\n\r\ninterface PostWithAuthorUser extends Post {\r\n    author: User;\r\n}\r\n\r\n@Component({\r\n    selector: 'spiff-landing-page',\r\n    templateUrl: './landing-page.component.html',\r\n    styleUrls: ['./landing-page.component.scss']\r\n})\r\nexport class LandingPageComponent implements OnInit {\r\n    posts: PostWithAuthorUser[];\r\n    loadingPosts: boolean;\r\n    postStatus: 'Ok' | 'None' | 'Error' = 'None';\r\n\r\n    constructor(private title: Title,\r\n                private post: PostService,\r\n                public dialog: DialogService,\r\n                private account: UserAccountService) { }\r\n\r\n    ngOnInit(): void {\r\n        this.title.setTitle('spiffing');\r\n        this.fetchPosts();\r\n    }\r\n\r\n    async fetchPosts(): Promise<void> {\r\n        this.loadingPosts = true;\r\n        try {\r\n            this.posts = await this.post.getPostsByUserId(undefined, true) as any;\r\n            this.postStatus = this.posts.length ? 'Ok' : 'None';\r\n        } catch (error) {\r\n            if (error.message === 'NoConnection') {\r\n                this.posts = [];\r\n            }\r\n            this.postStatus = 'Error';\r\n        }\r\n        this.loadingPosts = false;\r\n    }\r\n\r\n    isPostLiked(postId: string): boolean {\r\n        if (this.account.ratedPosts.has(postId)) return this.account.ratedPosts.get(postId);\r\n        else return false;\r\n    }\r\n\r\n    isPostDisliked(postId: string): boolean {\r\n        if (this.account.ratedPosts.has(postId)) return !this.account.ratedPosts.get(postId);\r\n        else return false;\r\n    }\r\n\r\n    toTimestamp(post: Post): string {\r\n        return new Date(post.date * 1000).toLocaleString();\r\n    }\r\n\r\n    async likePost(post: Post | Comment): Promise<void> {\r\n        post = post as Post;\r\n        if (post === undefined || post === null) throw new Error('LandingPageComponent: provided post to like was ' + post);\r\n        if (this.account.ratedPosts.get(post._id) === true) {\r\n            const rateRequest = await this.account.ratePost(post._id, 0);\r\n            if (rateRequest.ok === true) {\r\n                this.account.ratedPosts.delete(post._id);\r\n                post.likes--;\r\n            } else throw new Error('Error while liking post in Post View: ' + rateRequest.error);\r\n        } else {\r\n            const rateRequest = await this.account.ratePost(post._id, 1);\r\n            if (rateRequest.ok === true) {\r\n                if (this.account.ratedPosts.get(post._id) === false) post.dislikes--;\r\n                this.account.ratedPosts.set(post._id, true);\r\n                post.likes++;\r\n            } else throw new Error('Error while liking post in Post View: ' + rateRequest.error);\r\n        }\r\n    }\r\n\r\n    async dislikePost(post: Post | Comment): Promise<void> {\r\n        post = post as Post;\r\n        if (post === undefined || post === null) throw new Error('LandingPageComponent: provided post to like was ' + post);\r\n        if (this.account.ratedPosts.get(post._id) === false) {\r\n            const rateRequest = await this.account.ratePost(post._id, 0);\r\n            if (rateRequest.ok === true) {\r\n                this.account.ratedPosts.delete(post._id);\r\n                post.dislikes--;\r\n            } else throw new Error('Error while liking post in Post View: ' + rateRequest.error);\r\n        } else {\r\n            const rateRequest = await this.account.ratePost(post._id, -1);\r\n            if (rateRequest.ok === true) {\r\n                if (this.account.ratedPosts.get(post._id) === true) post.likes--;\r\n                this.account.ratedPosts.set(post._id, false);\r\n                post.dislikes++;\r\n            } else throw new Error('Error while liking post in Post View: ' + rateRequest.error);\r\n        }\r\n    }\r\n}\r\n","<mat-card class=\"landing-page-container\">\r\n    <ng-container *ngIf=\"!loadingPosts; else spinner\">\r\n        <ng-container [ngSwitch]=\"postStatus\">\r\n            <ng-container *ngSwitchCase=\"'Ok'\">\r\n                <div *ngFor=\"let post of posts\" class=\"landing-page-post\">\r\n                    <spiff-rate-counter\r\n                        [item]=\"post\"\r\n                        [liked]=\"isPostLiked(post._id)\"\r\n                        (like)=\"likePost($event)\"\r\n                        [disliked]=\"isPostDisliked(post._id)\"\r\n                        (dislike)=\"dislikePost($event)\">\r\n                    </spiff-rate-counter>\r\n                    <div>\r\n                        <p class=\"post-title hover-underline\" [routerLink]=\"'/post/' + post._id\">{{ post.title }}</p>\r\n                        <div class=\"user-details\">\r\n                            <p>\r\n                                <span [title]=\"toTimestamp(post)\">submitted {{ post.date | dateAgo }} ago</span> by\r\n                                <span\r\n                                    title=\"Click to go to profile\"\r\n                                    [routerLink]=\"'/user/' + post.author.username\" class=\"user-link hover-underline\">\r\n                                        u/{{ post.author.username }}\r\n                                </span>\r\n                            </p>\r\n                        </div>\r\n                        <p class=\"comments-label\">\r\n                            {{ post.comments.length + (post.comments.length === 1 ? ' comment' : ' comments') }}\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"'None'\">\r\n                <p>No posts!\r\n                    <span (click)=\"dialog.openCreatePostDialog()\" class=\"underline-hover\">Why not make one?</span>\r\n                </p>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"'Error'\">\r\n                <p>Looks like we couldn't load any posts</p>\r\n                <a (click)=\"fetchPosts()\">Retry</a>\r\n            </ng-container>\r\n        </ng-container>\r\n    </ng-container>\r\n    <ng-template #spinner>\r\n        <mat-spinner class=\"landing-page-spinner\"></mat-spinner>\r\n    </ng-template>\r\n</mat-card>","export { LoginDialogComponent } from './login-dialog';\r\nexport { CreateAccountDialogComponent } from './create-account-dialog';\r\nexport { ChangeUsernameDialogComponent } from './change-username-dialog';\r\nexport { DeleteAccountConfirmDialogComponent } from './delete-account-confirm-dialog';\r\n","// This file is autogenerated; changes may be overwritten.\n\nimport { Post, Rates, User, Comment }  from '../data-types';\r\nimport { IErrorResponse, IOkResponse } from '../response';\r\nimport {\r\n    AuthorizedRequestError,\r\n    IAuthHeaderIdParamMismatchError,\r\n    IIllegalValueError,\r\n    IMissingDataError,\r\n    INoCommentFoundError,\r\n    INoPostFoundError,\r\n    INoUserFoundError,\r\n    IObjectIdParseError,\r\n} from './error-responses';\r\n\r\nexport namespace IGetPosts {\r\n    export type ErrorTx = INoPostFoundError | IObjectIdParseError;\r\n\r\n    export interface Success extends IOkResponse {\r\n        posts: Post[];\r\n        failed?: any;\r\n        'query-blocked'?: string[];\r\n        'query-allowed'?: string[];\r\n    }\r\n\r\n    export type Tx = ErrorTx | Success;\r\n}\r\n\r\nexport namespace ICreatePost {\r\n    export type ErrorTx = AuthorizedRequestError | IMissingDataError | IObjectIdParseError;\r\n\r\n    export interface Success extends IOkResponse {\r\n        post: Post;\r\n    }\r\n\r\n    export type Tx = ErrorTx | Success;\r\n}\r\n\r\nexport namespace IRatePost {\r\n    export type ErrorTx = AuthorizedRequestError | IMissingDataError | INoPostFoundError | IObjectIdParseError;\r\n\r\n    export interface Success extends IOkResponse {}\r\n\r\n    export type Tx = ErrorTx | Success;\r\n}\r\n\r\nexport namespace IGetRates {\r\n    export type ErrorTx = AuthorizedRequestError | INoUserFoundError | IAuthHeaderIdParamMismatchError;\r\n\r\n    export interface Success extends IOkResponse {\r\n        rates: Rates;\r\n    }\r\n\r\n    export type Tx = ErrorTx | Success;\r\n}\r\n\r\nexport namespace IGetUsers {\r\n    export type ErrorTx = IMissingDataError | IObjectIdParseError;\r\n\r\n    export interface Success extends IOkResponse {\r\n        users: User[];\r\n        'allowed-queries'?: string[];\r\n        'blocked-queries'?: string[];\r\n    }\r\n\r\n    export type Tx = ErrorTx | Success;\r\n}\r\n\r\nexport namespace IPostComment {\r\n    export type ErrorTx = AuthorizedRequestError | INoPostFoundError | IMissingDataError |\r\n    INoCommentFoundError | IIllegalValueError | IObjectIdParseError;\r\n\r\n    export interface Success extends IOkResponse {\r\n        comment: Comment;\r\n    }\r\n\r\n    export type Tx = ErrorTx | Success;\r\n}\r\n\r\nexport namespace IDeleteComment {\r\n    export type ErrorTx = AuthorizedRequestError | INoCommentFoundError | IObjectIdParseError;\r\n\r\n    export interface Success extends IOkResponse {\r\n        fullyDeleted: boolean;\r\n    }\r\n\r\n    export type Tx = ErrorTx | Success;\r\n}\r\n\r\nexport namespace IGetComments {\r\n    export interface IInvalidInputError extends IErrorResponse<'Invalid Input'> {\r\n        allowed: string | string[];\r\n        context: 'params';\r\n        key: string;\r\n        provided: string;\r\n    }\r\n\r\n    export type ErrorTx = IInvalidInputError | IMissingDataError | IObjectIdParseError;\r\n\r\n    export interface Success extends IOkResponse {\r\n        comments: Comment[];\r\n        acceptedParams?: string[];\r\n        ignoredParams?: string[];\r\n        includeSuccessful?: boolean;\r\n    }\r\n\r\n    export type Tx = ErrorTx | Success;\r\n}\r\n\r\nexport namespace IRateComment {\r\n    export type ErrorTx =\r\n        | AuthorizedRequestError\r\n        | IMissingDataError\r\n        | INoCommentFoundError\r\n        | IObjectIdParseError;\r\n\r\n    export interface Success extends IOkResponse {\r\n        change: boolean;\r\n    }\r\n\r\n    export type Tx = ErrorTx | Success;\r\n}\r\n","export * from './button';\r\nexport * from './view-card';\r\nexport * from './dialog';\r\n","export { DeleteAccountConfirmDialogComponent } from './delete-account-confirm-dialog.component';\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}