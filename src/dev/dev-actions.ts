import { chalk } from 'tools/chalk';
import { Request } from 'express';
import { RouteInfo } from 'route-handling/route-infra';
import { Transform, Readable } from 'stream';
import { createReadStream, accessSync, constants } from 'fs';

function streamFile(path: string): Readable {
    accessSync(path, constants.R_OK);
    const stream = new Transform({ transform: function(chunk, buffer, next: () => void) {
        this.push(chunk);
        next();
    }});
    stream.write('// This file is autogenerated; changes may be overwritten.\n\n');
    createReadStream(path).pipe(stream);
    return stream;
}

function streamFileHandler(request: Request, name: string, verbose: boolean, id: string): void {
    try {
        streamFile(`src/server/interface/${name}.ts`).pipe(request.res!);
        if (verbose) chalk.lime(id + ' Stream was successful.\n');
    } catch (e) {
        request.res!.status(500).send({
            message: 'An error occurred.',
            error: e.message
        });
        if (verbose) chalk.rust(id + ' An error occurred during the stream.\n');
    }
}

export const devInfo: RouteInfo[] = [
    { method: 'GET', path: '/dev/:name',
        handler: null as any,
        stream: true,
        streamHandler: (request, verbose, id) => streamFileHandler(request, request.params.name, verbose, id) },
    { method: 'GET', path: '/dev/responses/:name',
        handler: null,
        stream: true,
        streamHandler: (request, verbose, id) => streamFileHandler(request, `responses/${request.params.name}`, verbose, id) }
];
