import { Request }                                 from 'express';
import { createReadStream, accessSync, constants } from 'fs';
import { Transform, Readable }                     from 'stream';
import { RouteInfo } from 'route-handling/route-infra';
import { chalk }     from 'tools/chalk';

function streamFile(path: string): Readable {
    try {
        accessSync(path, constants.F_OK);
    } catch (e) {
        throw new Error(`File does not exist: '${path}'.`);
    }
    const stream = new Transform({ transform: function(chunk, buffer, next: () => void) {
        this.push(chunk);
        next();
    }});
    stream.write('// This file is autogenerated; changes may be overwritten.\n\n');
    createReadStream(path).pipe(stream);
    return stream;
}

function streamFileHandler(request: Request, name: string, verbose: boolean, id: string): void {
    try {
        streamFile(`src/server/interface/${name}.ts`).pipe(request.res!);
        if (verbose) chalk.lime(id + ' Stream was successful.\n');
    } catch (e) {
        request.res!.status(500).send({
            message: 'An error occurred.',
            error: e.message
        });
        if (verbose) chalk.rust(`${id} An error occurred during the stream: \n\t${e.message}\n`);
    }
}

export const devInfo: RouteInfo[] = [
    {
        method: 'GET',
        path: '/dev/:name',
        streamHandler: (request: Request, verbose: boolean, id: string): void =>
            streamFileHandler(request, request.params.name, verbose, id)
    },
    {
        method: 'GET',
        path: '/dev/responses/:name',
        streamHandler: (request: Request, verbose: boolean, id: string): void =>
            streamFileHandler(request, `responses/${request.params.name}`, verbose, id)
    }
];
